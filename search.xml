<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mysql基础-pymysql操作以及安全问题]]></title>
    <url>%2F2019%2F08%2F15%2Fmysql%E5%9F%BA%E7%A1%80-pymysql%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[mysql基础-其他知识]]></title>
    <url>%2F2019%2F08%2F14%2Fmysql%E5%9F%BA%E7%A1%80-%E5%85%B6%E4%BB%96%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[视图视图的介绍 什么是视图？事干什么用的 视图就是 一个 select 语句 对象，当执行视图，说白了就是 执行 特定的现钱写好的 select 语句 通过视图，可以展示 基表的部分数据；视图数据来自基表 基表：用来创建视图的表 叫做基表 为什么用视图，优点是什么？ 简单 : 让使用视图的人 更加简单，用户无需关心 基表的 数据结构 等一系列复杂的问题（有点像快捷键） 安全：使用视图，可以控制 使用者 访问他们被允许的查询结果集，因为对 表的每一列无法做到权限的控制，但是通过视图可以实现对 表中的 列 的权限的管理 数据独立：一但视图结构确定，那么就可以屏蔽 表结构变化 对用户的影响，原表增加列 对 视图没有影响；原表修改列名，可以通过修改视图来解决，不会对使用者造成影响 保障数据的安全，提高查询的效率 创建12格式：create view 视图名 as sql语句create view v1 as select nid,name from A where nid &gt; 4; 使用使用视图时，将其当做表进行操作即可，视图和真实的表都会受影响 1select * from v1 删除12格式： drop view 视图名drop view v1 修改当表的数据结构改变或则其他变动的时候，可以通过修改视图，使用者使用还是一样，结果就是修改之后的结果1234格式：alter view 视图名 as sql 语句egalter view v1 asselect A.nid ,B.name from A left join B on A.id = B.nid left join C on A.id = C.nid where A.id&gt;2 and C.nid &lt;5; 触发器什么是触发器，场景是什么？当数据库中某个数据 的值发生变化，那么 触发另外一个数据 自动按照规定 修改数据的值​ 场景：当用户下单一个商品，对应的 库存需要减少，这是一组 触发器语法1234567891011121314151617181920212223242526272829303132333435# 插入数据前触发create trigger tri_berfore_insert_tb1 before insert on tb1 for each rowbegin...(触发语句)end# 插入数据后触发create trigger tri_after_insert_tb1 after insert on tb1 for each rowbegin...(触发语句)end# 删除数据前触发create trigger tri_after_delete_tb1 before delete on tb1 for each rowbegin...(触发语句)end# 删除数据后触发create trigger tri_after_after_tb1 after delete on tb1 for each rowbegin...(触发语句)end# 跟新数据前触发create trigger tri_after_update_tb1 before update on tb1 for each rowbegin...(触发语句)end# 跟新数据后触发create trigger tri_after_update_tb1 after update on tb1 for each rowbegin...(触发语句)end eg： 123456delimiter // (用 // 代替系统 的 ；，代表 语句 结束)create trigger tri_before_insert_insert_tb1 before insert on tb1 for each rowbegin insert into tb2 (name) values (&apos;aa&apos;)end//delimiter ；(将系统的恢复回来) 使用器语法触发器无法由用户直接调用，当表里面的数据 增/删/改 操作 才会触发触发器对应的操作 1insert into tb1 (num) values (666) 删除器语法1drop trigger tri_after_insert_tb1; 索引作用 与 说明**加速查找**​ 就理解为 字典的 索引目录 底层原理​ B+ 树 类型 主键索引 加速查找，不能为空，不可重复 primary key 123456create table xx( id int, name varchar(32) not null default &apos;&apos;, unique uq_name (name))alter table xx change id id int primary key; (设置为主键) 唯一索引 *加速查找 + 不能重复 unique(name): name 字段 的值 不能重复 * 唯一联合索引： 加速查找 + 两列组合不能重复 123456create table xx( id int auto_increment primary key, name varchar(32) not null default &apos;&apos;, unique uq_name (name) //唯一所以，name 不能重复)create unique ix_name on xxx(name) // 联合索引，ix_name 与 name 组合的值 不能重复 普通索引 和 组合做引 加速查找 12index ix_name (name)index ix_name_email (name,email) eg 12345678910111213create table xxx( id int auto_increment primary key, name varchar(32) not null default &apos;&apos;, email varchar(32) not null default &apos;&apos;, index ix_name (name) //建立唯一索引)create index ix_name on name // 后期补 唯一索引create index ix_name_email on (name,email) // 后期补 组合索引使用： where 查询时候 条件是 索引的字段，生效select * from t1 where name=&apos;xx&apos;; select * from t1 where name=&apos;xx&apos; and email&gt;3; 查看索引1show index from table_name 删除索引1drop index_name(索引名) on table_name; 索引的必要性说明优缺点： 加快查询速度 增 删 改 查 效率会降低 原则： ​ 根据业务需求来决定是否使用 索引的使用条件索引不适用的情况 sql 语句中 包含 like sql 语句中 有 函数 事务事务就是一组操作，要么都成功，要么都失败 事务的ACID特性 Atomicity：原子性，原子即为最小的单位，代表此任务 无法再细分了，就是最小的单元 Consistency：一致性，就是事务发生后，数据依然匹配 Isolation：隔离性 , 就是事务的操作 对 其他的事务是不可见的 Durabillity：持久性，当事务发生后，其影响会保留下来，无法撤销，只能通过 “补偿性事务” 来抵消之前的错误 事务的用法1234567891011121314开启事务（start transaction）执行sql操作（普通的sql语句）提交/回滚（commit/roolback）eg:start transaction;update users set money=900 where id=1;(success)update users set money=900 where id=2;(fail)rollback;egSTART TRANSACTION;SELECT @A:=SUM(salary) FROM table1 WHERE type=1;UPDATE table2 SET summary=@A WHERE type=1;COMMIT; 事务支持引擎Innodb 和 MyISamd的区别 Innodb 支持事务，myISam 不支持 版本5.5 默认 Innodb 5.5 以下默认 MyIsam Innodb 支持行锁（并发量大使用） MyISam表锁 函数执行计划explain + 查询SQL - 用于显示SQL执行信息参数，然后根据参数 优化 SQL语句 1explain select * from tb2; 慢日志查询 当某个sql语句执行比较慢，那么我们可以设置，用日志 记录下来 12345678show_query_log = OFF // 是否开启慢日志long_query_time =2 // 时间限制，超过此时间，则记录show_query_log_file = /usr/slow.log // 日志文件地址show variables like &apos;%query%&apos; // 查看当前配置的信息//修改set global 变量名 = 值 备份备份：包含库名和建表语句和数据 12mysqldump -h主机名 -P端口 -u用户名 -p密码 –database 数据库名 &gt; 文件名.sql mysqldump –database 数据库名 &gt; 文件名.sql 还原： 12mysql -h主机名 -u用户名 -p密码 数据库名 &lt; 文件名.sql mysql 数据库名 &lt; 文件名.sql eg: 还需要完善 123mysqldump -h127.0.0.1 -p3306 -uroot -p --databases test111 &gt; dump4.sqlmysql -h127.0.0.1 -p3306 -uroot -p beifen &lt; dump4.sql]]></content>
  </entry>
  <entry>
    <title><![CDATA[mysql基础-基础操作]]></title>
    <url>%2F2019%2F08%2F14%2Fmysql%E5%9F%BA%E7%A1%80-%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[本文主要介绍 mysql 的基本操作，包括 数据库 增删改查 表的增删改查 等 数据库的操作 显示数据库1show databases; 创建数据库1created database db1（数据库名字）; 使用数据库1use db1; //使用数据库 相当于 双击 打开 excel 删除数据库 慎用1drop database db1; 删除数据库 修改数据库名没有直接修改数据库名字，只能先 删除 后 创建 用户管理 授权管理 MySQL数据类型 数值型tinyint smallint mediumint int bigint float double decimal 补充 unsigned 表示 无符号 float(M,D) 浮点型 decimal(M,D) 定点型 比 float 更加精准 M：精度（总位数） D：标度（小数位） 字符型 char(32) ：最长32，定长， hello（5个字符，剩下的 27 个字符就会被浪费，但是效率高） varchar(32)： 最长不能超过32 变长 hello(5个字符，会计算出5 个字符的空间，剩余的 空间不会给出，不浪费空间，但是效率低) text ：文本 可以存一篇文章 时间类型 特殊类型NULL NULL 不是假 也不是真，而是空 NULL 的判断只能用 is null , is not null NULL 影响查询速度，一般避免使用NULL 数据表的操作 创建表123456789101112create table 表名( 列1 列属性[是否为null 默认值]， 列2 列属性[是否为null 默认值]， ... 列3 列属性 （最后一个 不要有 ,）)engine = 存储引擎 charset = 字符集eg:create table t1( id int auto_increment primary key, (主键的写法) name char(32) not null default '', (不为空，默认值为 '') create_time datetime not null default '1970-01-01 00:00:00')engine = Innodb charset = utf8 删除表 慎用，不可恢复1drop table t1; 清空表123delete from t1;truncate table t1;// 两个都可以 修改表12345678// 修改列属性alter table 表名(t1) change 老列名(name) 新列名(username char(32))// 添加一列alert table 表名(t1) change 新列名(age int)// 删除一列alter table 表名(t1) drop 老列名(age) 查询表1234// 查询数据库中所有的 tableshow databases;// 查看 创建表的语句show create table t1; 表中具体数据操作 增123insert into 表名（列1，列2，...,列n） values （值1，值2，...,值n），（值1，值2，...,值n）；eg：insert into t1 (name,age) values (&apos;zhangsan&apos;,19),(&apos;lisi&apos;,40); 外键 外键的约束 外键的列的值 可以重复 外键的列的值 必须 取关联 表中 列的值（不能凭空生成） 外键的创建 1234567891.创建表的开始 就 设置外键create table t1( id int auto_increment primary key, name varchar(32) not null default &apos;&apos;, depatr_id int , constraint 外键名(fk_userinfo_department) foreign key (depart_id) references department(id) //设置外键（depart_id） 关联的是 department 表中的 id )engine=Innodb charset=utf8;2. 后面追加alter table userinfo add constraint 外键名（fk_userinfo_department） foreign key(depart_id) references department(id); 删123delete into 表名（t1）； // 表删除后 再次插入数据， id 在以前历史数据的基础上 自增truncate t1; // 表删除后 再次插入数据 id 从 1 开始delete from t1 where id=10; //删除 符合条件的数据 改12345// 将符合条件的 数据 值改掉，如果没有查询条件，那么 表中的所有数据 全部改掉update 表名 set 列名1=值1，...,列名n=值n where xxx (查询条件) eg:update t1 set name=&apos;wangwu&apos;,age=20 where id&gt;2; 基本查询1select * from t1; //查询所用 高级查询 where 条件查询 123456where 后面跟的是 条件语句支持的 运算符有 &gt; &lt; = and or (not in) (bettwen .. in ..) in eg：slect * from t1 where id&gt;13 and id&lt;30; //搜索 id 大于13 并且 id 小于 30 的所有数据slect * from t1 where bettwen 13 in 30; //搜索 id 13-30 的所有数据slect * from t1 where id in (14,15); //搜索 id 位于14,15 之中 的所有数据 通配符匹配 12select * from t1 where name like &apos;j%&apos;; // %: 匹配字符创后所有的字符（以为 j 开头就行）select * from t1 where name like &apos;j_&apos;; // _ : 只匹配一个字符 （只匹配 j 这个字符） 限制条件 主要用于 分页查询 123456789select * from t1 limit 索引偏移量(n)，取多少条(offset)；eg：select * from t1 limit 0, 10;分页的SQL语句page：第几页size：每页多少条 （相当于 offset）select * from t1 limit (page-1)*offset, offset; 排序 12order by 列名 desc/asc (降序/升序)select * from t1 order by age desc, id asc; // 先按照 age 降序，若 age相等 再按照 id 升序 分组 1234567891011121314151617181920group by 列名聚合函数： count() ： 技术 sum() ： 求和 max() ： 最大值 min() ： 最小值 avg() ： 平均值 eg：select age, count(age) from t1 group by age; //按照age进行分组 并 展示 每组的个数select age, sum(age) from t1 group by age; // 按照age 分组，并计算每组的 和 并展示 having: 分组完 对结果做二次筛选// 按照 age 分组，并计算每组的个数，再筛选 个数 大于 2 的 分组select age, count(id) as cnt from t1 group by age having cnt&gt;2;ps：1. where 是对原生的列 进行 筛选2. having 是对 分组后的结果进行 筛选 连接查询 作用 &amp; 场景 很多时候，复杂的场景下，我们需要的 信息 是 多个表 组合起来 的数据，而不是 一张表 提供，这个时候就需要 连接查询 左连接 12select * from A left join B on A.nid = B.nid;// A 表所有 列都显示，如果B 中无对应关系 则为 null，B的列某个列 若与A 没有任何联系，那么不显示 右连接 12select * from A right join B on A.nid = B.nid;// B 表所有 列都显示，如果A 中无对应关系 则为 null，B的列某个列 若与B 没有任何联系，那么不显示 内连接 12select * from A inner join B on A.nid = B.nid;//内连接是左右连接的交际 子查询 场景 说明 很多时候，一句SQL 语句无法得到最后需要的结果，那么此时需要在 第一个SQL 语句得到的结果的基础上 再次 执行 SQL 也就是 SQL的嵌套 建议：子查询速度慢，不建议用，而是将子查询 拆成多个 单独的SQL 语句 用法 12345select * from t1 where id = (sql 语句)eg：select ename,deptno,salfrom empwhere deptno=(select deptno from dept where loc=&apos;NEW YORK&apos;)； 存储引擎和字符集 存储引擎数据库对同样的数据有不同的管理模式，怎么实现的，就是根据 存储引擎实现的 不同引擎之间的 区别 根据场景选择 引擎 文章新闻 等安全性要求不高的时候 ，使用 myisam 订单 资金 账单 火车票等 对安全性要求高的 选 innodb 对于 临时表中转表，使用 memory ，速度快 MySQL 在5.6 版本以上，默认是使用innodb 字符集 字符集是一套符号和编码的规则，不管哪个 数据库 都存在 字符集选择的问题 如果在创建之初 没有设置好，那么后期 再改，会有一定的风险 建议在建设之初就设置好 查看所有字符集 show variables like &#39;character_%&#39; 客户端与服务端 之间的字符集编码的转换（中间存在一个转换器） character_set_client =&gt; utf8 （客户端告诉转换器发过来的是utf8格式的编码） character_set_connection =&gt; utf8 （将客户端传过来的数据 用utf8 来转换） character_set_results =&gt; utf8 （告诉客户端 结果数据的编码 是utf8） 以上三个字符集可以使用 set names utf8 来统一进行设置 为何出现乱码 查看每个字符集的详细信息 latin 字符集 Alt text gbk 字符集 Alt text utf8 字符集 Alt text 结论：每个字符集 存储的大小不一致，所以在转换过程中 会出现丢失数据，导致乱码 如何解决乱码问题 在转换的过程中，只要有两个不一致，就会出现乱码，所以 只要保持 三个 编码字符集 一致即可 设置字符集的两种方法 使用 set names utf8 统一设置这种方法只会在当前会话串口生效，关闭再打开便失效 直接修改 my.ini 文件配置 如下 1234[mysql]default-character-set=utf8[mysqld]character-set-server=utf8 修改后 service mysql restart 重新启动 才能生效]]></content>
  </entry>
  <entry>
    <title><![CDATA[mysql基础-数据库简介与安装启动]]></title>
    <url>%2F2019%2F08%2F14%2Fmysql%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[数据库的简单介绍 以及 mysql 的安装 与 启动 知识 数据库简介数据库就是一个帮助我们管理 数据的 软件 当然管理数据 你也可以 用 excel ，但是 MySQL 相对而言 肯定是 相对 有很多优势，后面会介绍 数据库的分类 关系型数据库 有约束 基于 硬盘 存储 具体软件： MySQL SQLServer(微软 c# .net) Oracle（甲骨文 java）SQLlite DB2 mariadb pgsal 非关系型数据库 没有约束 （key -&gt; value 的形式） 基于内存 存储 具体软件： mongodb redies Memcache MySQL 数据库安装mysql 分为 服务端 socket 与 客户端client 下载地址 zip 包下载 直接解压就好了 exe文件 或则 msi 文件 需要点击 一步一步的安装 目录结构 bin 目录 mysqld : 启动服务端 mysql ：客户端连接服务器 data 目录 存放数据文件 具体安装 mac 1$ brew install mysql window （此处以 zip 为列） 解压 cd 到 bin 目录 mysqld (启动mysql 服务) mysql -uroot -p 回车即可 此时可以进入 mysql 的命令行 环境变量的配置 【计算机】- 【属性】- 【高级系统设置】- 【高级】 - 【环境变量】-【找到 path 一览 将bin 的绝对路径 追加到最后】]]></content>
  </entry>
  <entry>
    <title><![CDATA[python之Pycharm配置与安装]]></title>
    <url>%2F2019%2F08%2F05%2Fpython%E4%B9%8BPycharm%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[python之python环境配置安装]]></title>
    <url>%2F2019%2F08%2F05%2Fpython%E4%B9%8Bpython%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[关于python 的安装 网址点击这里 步骤]]></content>
  </entry>
  <entry>
    <title><![CDATA[js环境之node]]></title>
    <url>%2F2019%2F08%2F05%2Fjs%E7%8E%AF%E5%A2%83%E4%B9%8Bnode%2F</url>
    <content type="text"><![CDATA[node 简介以及安装教程，多图 node 是什么 node 是 node.js 的运行环境，但是 随着 前端 的 不断发展，不管你搞不搞后端，node 的包管理等各个理念已经深入人心，基本作为必备技能之一 npm 是 node 自带的包管理工具，我们只需要下载 node，那么就集成了 npm 的安装 本机坏境说明 window 64node &amp; npm 如何查看版本 12node -vnpm -v node 如何卸载由于本机已经安装好，所以我们先从卸载开始 node 如何下载安装 常见问题说明 如何将路径加到path里面 很多时候也不知道什么原因，安装成功，但是不能全局使用，此时需要手动将 node 放到path 路径李敏 如何判断 是否已经安装成功 1234//1/cd 进 node 的安装目录 （我的是）F:\cx\node//注意 window 切换 根目录 先 F: 回车 node -v //如果安装好了，那么会显示版本号，如果显示没有此命令，那么就是node 没有安装好 如何查看是否已经加入path 路径 直接打开cmd 输入 node-v，如果path 已经添加好，那么会显示版本号，如果没有此命令，那么就是path没有node路径 如何添加到 全局变量中 计算机（右击）- 属性（高级系统设置） - 高级 - 环境变量 - 系统变量 找到 path 双击 在最后 追加 ：F:\cx\node ​ ​ ​ ​]]></content>
  </entry>
  <entry>
    <title><![CDATA[django快速体验]]></title>
    <url>%2F2019%2F08%2F05%2Fdjango%E5%BF%AB%E9%80%9F%E4%BD%93%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[本文主要介绍 Django的安装 并 快速体验 快速体验前提注意事项 计算机名字 不能含有中文 尽量 用 Pycharm 单独用窗口打开一个工程 项目文件夹不要有中文 django 尽量选择 1.11.11 的版本（比较稳定） pip 安装 并 体验1234$ pip3 install django==1.11.11 //安装 指定版本的 django$ django-admin startproject 项目名$ django-admin startapp 应用名$ django-admin start 应用名 （注意需要cd 到 应用名的目录下面） Pycharm 安装 并体验直接通过 创建一个 django 项目，会自动检测安装 django，默认会安装 最新版本，然后通过修改版本号码，修改django的版本 如何判断 是否 成功当看到控制台显示网站，点击浏览，看到 页面上显示 it worked 成功了 django 三板斧前提：每次添加一个路由（路径），需要在 urls.py 中 添加对应的 映射，然后在 views.py 中返回对用的内容 HttpResponse:返回字符串 render 返回html 文件 redirect 重定向 django 静态文件的处理在html 引用 服务器中的 图片 css js 文件等 ，如果每个文件都 写一个路由很麻烦，否则 是访问不了的，所以Django提供相对应的设置文件夹为 静态文件 未做处理访问静态文件 处理指定之后 访问静态文件 django mysql 设置说明： 默认 django 会连接自身带着的 db.sqlite3 django 支持连接 市面上 绝大多数的 数据库（mysql sqlserver 等） 连接每个不同的数据库 需要 安装不同 的 对应的 包 具体配置： 文件中的配置 setting 中 配置 如下 12345678910111213141516# django 默认自带一个小型的 sqlite3 的数据库，我们需要手动将其改掉DATABASES = &#123; # 'default': &#123; # 'ENGINE': 'django.db.backends.sqlite3', # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), # &#125; 'default':&#123; 'ENGINE': 'django.db.backends.mysql', # 告诉 Django 不要数据库 使用 mysql 'NAME': 'app01', # 数据库的名字 'USER': 'root', # 用户名 'PASSWORD': '', # 密码 'HOST': '127.0.0.1', # host 对应的ip 'PORT': 3306, # 指定端口 'CHARSET': 'utf8' # 字符编码 &#125;&#125; 其他配置 对应的应用名下的 init.py 或则 项目名下 的 init.py 文件中 告诉django 不要使用默认的mysqld_db 模块 而是使用 pymysql 需要安装对应的包 pymysql 12import pymysqlpymysql.install_as_MySQLdb() django ORM 什么是 ORM ORM 是 数据库中的表 与 python 中类与对象的对应关系 类 = 数据库的表 对象 = 数据库中的每一条 表记录 对象.属性 = 表记录中某个字段的值 优缺点 优点：操作简单，即时不会数据库的人使用，也是可以轻松操作数据库 缺点：有时候 效率会 比较底下（毕竟 经过封装） 注意点： Django 的 ORM 不会 帮你创建 数据库，创建的是表 ，和数据的增删改查 关于 ORM 中的代码 全部在 models.py 中 写 关于表的 配置 改变（表的创建，字段的配置修改），最后都需要 执行 下面的代码 123python3 manage.py makemigrations 将数据的更改操作记录到小本本上 python3 manage.py migrate 将更改真正同步到数据库 具体操作（数据的增删改查） 增 12345671. create()models.User.object.create(kwargs) // 返回当前创建的对象2. 对象.save()user_obj = models.User()user_obj.username = &apos;zhangsan&apos;user_obj.password = &apos;123&apos;user_obj.save() 删 1queryset对象.delete() 改 123456781. update() models.User.objects.filter(kwargs).update() 批量更新2.对象.save() user_obj = models.User(kwargs) user_obj.username = 'zhangsan' user_obj.save() 效率较低 查 121. all() 查询所有 不需要传递参数2. filter（kwargs） 结构是一个 queryset 对象 增删改查 综合案列 Pycharm 中数据库可视化工具 可能遇到的问题 post 请求出现问题 本地数据库连接不上 本地数据库必须开启 对应的数据库必须自己手动创建，Django 创建的是 table template 无法访问问题]]></content>
  </entry>
  <entry>
    <title><![CDATA[前端基础-框架-jquery]]></title>
    <url>%2F2019%2F08%2F02%2F%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%A1%86%E6%9E%B6-jquery%2F</url>
    <content type="text"><![CDATA[本篇文章主要简单介绍 前端框架 jQuery ，当然也是 基础的部分 jQuery 简介jQuery 是什么 jQuery 是 js 的一个 库，相当于 python的 一个模块 jQuery 是封装了 原生 js 的 一系列 方法的集合 jQuery 能干什么 对HTML标签的 增删改查 修改标签的 属性 修改css 的增删改查 ajax 异步请求的封装 事件绑定 jQuery 与原生js 操作对比（更简单）12345// 原生jsvar dEle =document.getElementsByTagName('div')[0];dEle.style.color = 'red';// jQuery$('div').css('color','blue'); 基本使用jQuery 如何配置 将 jQuery 包下载下来，然后 src 标签 引入 直接引用线上 cdn 地址 jQuery 基本选择器 jQuery 基本选择器 12345$('div')$('.ci')$('#d1')1. $ 简写 代替 jQuery2. 括号后面直接 跟 选择器 （需要带 # . 来表示不同的 选择器类型） jQuery 对象 与 js原生对象 1234561.jQuery 对象是个 数组，按照 索引去除里面单个元素就是 原生js 对象，所以两者是不一样的2.js 转jQvar d1Ele = document.getElementByTagName('div');$(d1Ele)3.jQ 转 js$('div')[0] jQuery 属性查找 与 操作 三种基本选择器 1234567891011//1. id 选择器$('#id')//2. 标签选择器$('div')//3. class 选择器$('.className')//4. 配合使用$('div.c1') // 找到 便签为 div 并且 clss 为 c1 的元素$('div .c1') // 找到 标签为 div 下面的所有 class 为c1 的元素//5. 所有元素选择器$('*') 层级选择器 1234$('x y') // x 所有后代中 y $('x &gt; y') // x 所有儿子 中的 y$('x + y') // 紧挨着 x 后面的 y （所有的弟弟）$('x ~ y') // x 所有 兄弟 中 y （所有 哥哥 和 弟弟） 基本筛选器 123456789101112131415:first // 第一个:last // 最后一个:eq(index) // 索引 为 index 的元素:even // 匹配 索引为 偶数的元素 （从0开始）:odd //匹配 所以为 奇数的元素:gt(index) // 索引大于 index 的元素:lt(index) // 索引小于 index 的元素:not(元素选择器) // 移除所有 满足 not 条件的 元素：has(元素选择器) // 只选择 所有 包含 满足has 条件的 元素 //eg$("div:has(h1)")// 找到所有后代中有h1标签的div标签$("div:has(.c1)")// 找到所有后代中有c1样式类的div标签$("li:not(.c1)")// 找到所有不包含c1样式类的li标签$("li:not(:has(a))")// 找到所有后代中不含a标签的li标签 属性选择器 12345678910[attribute] // 有此属性的 元素[arrribute=value] // 属性为 value 的元素[arribute!=value] // 属性 不为 value 的元素//eg&lt;input type="text"&gt;&lt;input type="password"&gt;&lt;input type="checkbox"&gt;$("input[type='checkbox']");// 取到checkbox类型的input标签$("input[type!='text']");// 取到类型不是text的input标签 表单筛选器 12345678910111213141516171819202122232425262728293031323334:text:password:file:radio:checkbox:submit:reset:button//表单对象属性::enabled:disabled:checked:selected// eg1&lt;form&gt; &lt;input name="email" disabled="disabled" /&gt; &lt;input name="id" /&gt;&lt;/form&gt;$("input:enabled") // 找到可用的input标签// eg2&lt;select id="s1"&gt; &lt;option value="beijing"&gt;北京市&lt;/option&gt; &lt;option value="shanghai"&gt;上海市&lt;/option&gt; &lt;option selected value="guangzhou"&gt;广州市&lt;/option&gt; &lt;option value="shenzhen"&gt;深圳市&lt;/option&gt;&lt;/select&gt;$(":selected") // 找到所有被选中的option 筛选器方法 下一个元素 1234//具体意思 ，看到方法名字 就知道了$('#id').next()$('#id').nextAll()$('#id').nextUntil('#i1') 上一个元素 123$('#id').prev()$('#id').prevAll()$('#id').prevUntil('#i1') 父亲元素 123$('#id').parent()$('#id').parents()$('#id').parentsUntil('#i1') 儿子&amp;兄弟元素 12$("#id").children();// 儿子们$("#id").siblings();// 兄弟们 查找 123456789101112$("div").find("p") // 等价于$('div p')//筛选$('div').filter('.c1') // 从结果集 中过滤 有c1 的样式.first() // 获取匹配的第一个元素.last() // 获取匹配的最后一个元素.not() // 从匹配元素的集合中删除与指定表达式匹配的元素.has() // 保留包含特定后代的元素，去掉那些不含有指定后代的元素。.eq() // 索引值等于指定值的元素 链式操作 1234567# 一行代码实现第一个p变红，第二个p变绿&lt;div&gt; &lt;p&gt;p1&lt;/p&gt; &lt;p&gt;p2&lt;/p&gt;&lt;/div&gt;$('div&gt;p').first().addclass('c1').next().addclass('c2'); jQuery 文档处理 主要就是 HTML 标签的增删改查 123456789101112131415//1. 标签内部 尾部 追加元素$('#d1').append(pEle);$pEle.appendTo($('#d1'))//2. 标签内部 头部 增加元素$('#d1').prepend(pEle)$pEle.prependTo($('#d1'))//3. 标签外部 下面 添加元素 $(A).after(B) // 把B放到A的后面$(A).insertBefore(B) // A 插到 B 前面//4. 标签外部 上面 添加元素$(A).before(B) // 把B放到A的前面$(A).insertBefore(B) // A 插到 B前面//5. 替换标签replaceWith() // 什么被什么 替换replaceAll() // 拿什么替换什么 jQuery 操作css 基本操作 123456//1.获取属性值(font-size 不需要驼峰，跟js 不一样)$('#p1').css('font-size')//2.设置 某个属性值 注意是 ， 不是：$('#p1').css('font-size','24px');// 3. 设置多个属性值$('#p1').css(&#123;"border":"1px solid black",“color”：“blue”&#125;)； 位置操作 （postion：relative fixed abluate，相当于修改 其 offset的值） 123456789//1.获取位置偏移参数 （注意：获取的值 与 设置的值 是保持一致的）$('.c').offset()//2.设置参数 注意此处不是字符串，而是 直接 key 不需要加 引号，值时 Number形式 $('.c').offset(top:284,left:100)// 3. postion 的值 只能获取，设置不起作用// scrollTop 获取当前滚动条偏移量$(window).scrollTop()// 设置滚动条到 指定位置（通常都是 到达 顶部）$(windowm).scrollTop(0); jQuery 事件绑定 绑定的几种方法形式 123456789101112//方法一$(&apos;p&apos;).hover(function()&#123; console.log(&apos;鼠标移上来了 。。。&apos;);&#125;,function()&#123; console.log(&apos;鼠标移走了 。。。&apos;);&#125;)//方法二 input focus blur 事件$(&apos;#i1&apos;).on(&apos;input&apos;,function()&#123; console.log($(this).val())&#125;) 事件冒泡 当子标签 与 父标签都有 点击事件，那么点击 子标签，那么 子标签与 父标签 都会相应click 事件，这就是冒泡 如何解除 1234$(&apos;span&apos;).click(function(e)&#123; alert(&apos;span click ...&apos;) e.stopPropagation(); //阻止冒泡&#125;) 事件委托 TODO js 中事件委托 详细的讲解看这里 123456&lt;button&gt;按钮&lt;/button&gt;&lt;script&gt; $('body').on('click','button',function () &#123; alert(123) &#125;)&lt;/script&gt; jQuery 扩展方法 each() 遍历方法 123456$.each(array,function(index)&#123; consoloe.log(array[index])&#125;)$divEles.each(function()&#123; // function 前面那个 可以省略 console.log(this); // 打印每个标签对象 &#125;) data() 设置 自定义属性的值 注意：通过此方法设置的属性 用户不可见，通过页面中的源代码也看不到 123$(div).data('k'); // 获取 标签的 k 属性的值$('div').data("k",100); // 设置 标签的 k 属性的值$('div').removeData('k'); // 移除元素的 k 属性 jQuery 自带动画简单的动画过度，渐入渐出等 123456789$('img').hide(5000)$('img').show(3000)$('img').slideUp(3000)$('img').slideDown(3000)$('img').fadeIn(3000)$('img').fadeOut(3000)$('img').fadeTo(3000,0.4) // 0.4 为透明度]]></content>
  </entry>
  <entry>
    <title><![CDATA[前端BOM与DOM]]></title>
    <url>%2F2019%2F08%2F01%2F%E5%89%8D%E7%AB%AFBOM%E4%B8%8EDOM%2F</url>
    <content type="text"><![CDATA[前端css 简单介绍 关于DOM 与 BOM 的简单介绍 DOM DOM的简单介绍 定义：document Object model （文档对象模型） 理解为 HTML 对应的 对象，html在js 中的体现形式，这样js 才可以操作它 获取标签对象的三种方法 document.getElementById(&#39;#name&#39;) 获取 id 为 name 的标签 （一般id 只能有一个，即时有两个，那么也获取到一个） document.getElementsByClass(&#39;.name&#39;) 获取 class 为 name 的 div （返回一个数组） document.getElementsByTagName(&#39;div&#39;) 货物 标签为 div 的所有标签 （返回一个数组） 如何操作标签对象的内容与属性 获取标签的内容 12345678910var obj = document.getElementById('c1');obj.innerText // 获取内容,此内容不包含 标签 xxxxobj.innerHTML // 获取内容,此内容包含 标签 &lt;a href='#'&gt;xxxx&lt;/a&gt;obj.innerText = '新设置的内容'; //设置内容 obj.innerHTML = "&lt;a href='#'&gt;设置的内容&lt;/a&gt;"; //设置内容//获取与设置 input系列标签中 value 值obj.valueobj.value = 123 获取标签的属性 12345var obj = document.getElementById('c1');obj.getAttribute('id') // 获取属性obj3.setAttribute('k2', 'v2'); //设置属性obj3.removeAttribute('k1') // 删除属性 如何设置css 样式 大颗粒度设置 123d1.classList // 获取d1 标签的所有 class 的类 返回数组d1.classList.add('c1') // d1 添加 c1 的样式d1.classList.remove('c1') // d1 去除 c1 的样式 细颗粒度设置 1234obj.style.color = 'red' obj.style.fontSize = '20px' // font-size: 20px; 对应// 1. 值 全部是 字符串形式// 2. 当属性 有 - ，那么转换成 驼峰式 事件 常见事件 注意：事件的名字 不要驼峰 onclick 点击事件 onmouseover 鼠标放上去，触发事件 onmouseout 鼠标移开 触发函数 onfouces 获取焦点（input） onblur 失去焦点 事件如何绑定方法 12345678//第一种&lt;input type="text" onclik="f1();" &gt;function f1()&#123;&#125;//第二种&lt;input type="text" id='i1'&gt;var obj = document.getElementById('i1')；obj.onclick = function()&#123;&#125; window 常见方法 alert(123) // 弹框显示123 会阻塞线程 let res = confirm(&#39;确定删除吗？&#39;) // 确认框，返回 true false 会阻塞线程 open(&#39;www.baidu.com&#39;) // 打开新窗口 location.href=&#39;www.baidu.com&#39; // 当前窗口跳转 location.reload() // 刷新当前页面 BOM BOM（浏览器对象模型）是浏览器本身的一些信息的设置和获取 比如获取浏览器高度，宽度，跳转地址等 navigator 获取浏览器特征 123let ua = navigator.user.Agentlet isChorm = ua.indexOf('chrom') // 判断是否是 chorm// 通常用于判断 手机 的 浏览器等等 screen 获取屏幕信息 12console.log(screen.width)console.log(screen.height) location 窗口URl 地址相关操作，获取网址 协议 path 参数 hash 等 123456// 例如当前网址是 https://juejin.im/timeline/frontend?a=10&amp;b=10#someconsole.log(location.href) // https://juejin.im/timeline/frontend?a=10&amp;b=10#someconsole.log(location.protocol) // https:console.log(location.pathname) // /timeline/frontendconsole.log(location.search) // ?a=10&amp;b=10console.log(location.hash) // #some history 浏览器 前进与后退等 12history.back()history.forward()]]></content>
  </entry>
  <entry>
    <title><![CDATA[前端-js基础]]></title>
    <url>%2F2019%2F07%2F31%2F%E5%89%8D%E7%AB%AF-js%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[本文是对js基本知识的介绍 1. js环境介绍 js 简介 js 是前端的一门语言，可以操作 HTML 与 css js 是一门 弱类型语言，没有 太多的强制性的 限制，语言比较松散 js 的 变种很多，node.js typestript 等，也有许多框架 jQuery Vue React 等，非常丰富，应用的领域也非常广泛，理论上来说 前后端都可以 通吃 TODO：以后专门详细介绍 总结 各种框架 与 变种的对比 与差异 运行环境 &amp; 编辑器 一般运行在 浏览器上，node.js 运行在 V8 引擎上，作为后端语言 一般 常用的编辑器有 sublime vscode 等，其实 随便一个 文本编辑器 都可以 一般调试都用 chorm 的 控制台，里面异常强大，也可以直接 运行代码，就像 python 在命令行执行 TODO：关于 chorm 的控制台使用，看这篇文章 放置的位置 &lt;script&gt;....js的代码&lt;/script&gt; 通过这种方式 直接在 写在html 中 强烈不建议这么使用 若要使用，写在 body 之后 &lt;script src=&quot;js的资源路径&quot;&gt;&lt;/script&gt; 代码写在 单独文件里，直接引用地址 2.变量 变量申明 var name = &#39;fang&#39; let name = &#39;fang&#39; 命名规则 _ 数字 字母 $ 组成，不能以数字开头 TODO var let const 的区别，看这里 变量类型 字符串 常用方法一览： str.length 长度 str.trim() 去除左右空格 str.trimLeft() 去除左边空格 str.trimRight() 去除右边空格 str.charAt(n) 返回第 索引为 n 的字符 str.concat(val,….) 拼接字符串 str.indexOf(subString) 返回 subString 在 str 中出现的位置 ,没有就是 -1 str.substring(from,to) 根据索引获取 子字符串 str.slice(start,end) 切片 str.toLowerCase() 转小写 str.toUpperCase() 转大写 str.split(s,limit) 用 s 分割 str,返回数组 如何创建 var name = &apos;fang&apos; var name = `fang xxxxx`; 注意两者形式不一样 ‘’ 或则 ``; TODO 两者的区别 数字 int 整形 float 浮点型 布尔 true false 注意全是小写 数组 创建 var arr = [1,3,&#39;123&#39;] 常用方法一览 arr.length 长度 arr.push() 从尾部增加一个元素 arr.pop() 从尾部获取一个元素 arr.unshift() 从头部插入一个元素 arr.shift() 从头部 移除一个数组 arr.slice() 切片 arr.reverse() 反转 arr.join(‘,’) 将数组元素 用 某个 字符串（此处为 ，） 链接成一个 字符串 arr.concart(val) 合并数组 arr.sort() 排序 遍历 123for(index in arr)&#123; console.log(arr[i])&#125; 字典 创建 var dic = {name:&#39;fang&#39;,age:18} 遍历 123for (key in dic)&#123; console.log(dic[key])&#125; 对象 （object） 3. 运算符 算数运算符 + - * / % a++ a-- 比较运算符 &gt; &gt;= &lt; &lt;= != !== == === == 与 === 的区别 == 当对比的对象为 基本类型的时候，会先将 他们转换为 相同的 数据类型 再比对，若 一个是 基本数据类型 另一个是 引用类型，那么 不转换 === 先看类型是否相同，然后再比较 值是否相等，若都是 引用类型，那么是对比的内存地址是否相等，而不是 值相等 eg TODO 详细理解请看这篇文章 1234567console.log( 2 == '2') // trueconsole.log( 2 === '2') // falseconsole.log(&#123;name:'fang'&#125; == &#123;name:'fang'&#125;) // trueconsole.log(&#123;name:'fang'&#125; === &#123;name:'fang'&#125;) // falselet a1 = &#123;name:'fang'&#125;;let a2 = a1;console.log(a1 === a2) // true 赋值运算符 = += -= *= /= 4. 流程控制 顺序控制 代码自上而下运行 就是 顺序控制，90%的代码都是这样的，只是我们没有 特别注意到 分支 12345678910111213方式一：if(表达式判断)&#123;...&#125;elseif(表达式判断)&#123;...&#125;else&#123;...&#125;方式二：swith(表达式)&#123; case n: // n为表达式的值 代码块 break; case m: // m为表达式的值 代码块 break; default: 默认代码块&#125; 循环 12345678910111213141516//数组let arr = ['a','b','c'];//第一种for(i in arr)&#123;console.log(i,arr[i]);&#125;//第二种for(var i=0;i&lt;arr.length;i++)&#123; console.log(i,arr[i]); &#125; //字典var dic = &#123;name:'fang',age:18&#125;for(key in arr)&#123;console.log(key,arr[ke]);&#125; 5. 函数 如何创建 123456789101112// 第一种function test1(参数)&#123; console.log('创建函数') return true;&#125;test1() // 调用// 第二种let test2 = function (参数)&#123; console.log('创建函数') return true; &#125;test2()// 调用 参数 js 中函数的参数 只能 位置传参，不能关键字传参 参数可以设置默认值 （ES6 新功能） 在函数内部 通过 arguments（数组) 可实现 可变长参数的传递 回调函数 就是将 函数 作为另一个函数的参数，然后在函数内部 特定的时候，再调用 参数函数 js 中 没有多线程，所以 回调函数是做为 实现异步 的一个方法 js 代码执行 的时候 是没有多线程的 12345678function(cb)&#123; // .... 网络请求 代码 cb(success);&#125;function cb(success)&#123; // .... 处理网络请求成功回来的代码，实现异步&#125;// cb 只是个名字而已，没有强制规定名字，只是大家一般这么远叫而已 闭包 能够 获取函数内部 数据（变量）的函数 其实是为了解决 作用域问题，因为函数执行完之后，内部变量就销毁，此时需要另外一个函数做引用内部变量，那么就不会被 回收 1234567function outer()&#123;var a = 10;// ... 其他代码return function()&#123;return a;&#125;&#125; TODO 关于函数的参数 ，回调函数，闭包 等 细节内容，请看这里 6. 类 js 中的 说明 js 中类的概念 比较 薄弱，ES6 之前创建 一个类也非常的简单，ES6 创建类的方式 接近于其他强类型语言，也就是说大趋势是 js 慢慢规范了 如何创建 与 使用 1234567891011121314151617181920//ES6 之前：function dog(name)&#123; this.name = name; eat:function()&#123; console.log('i can eat',this.name) &#125;&#125;var hei = new dog('小黑')；hei.eat()// 注意：当不用 new 的时候，dog 就是一个 普通函数，当用new 那么dog 就是一个构造函数，是不是很崩溃，所以 有了新的改革//ES6class dog&#123; constructor(name)&#123; this.name = name; &#125; eat()&#123; console.log('i can eat',this.name) &#125;&#125; TODO：关于 ES6 与之前的 类的区别，继承的实现等一些列问题，看这里]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端-css]]></title>
    <url>%2F2019%2F07%2F30%2F%E5%89%8D%E7%AB%AF-css%2F</url>
    <content type="text"><![CDATA[前端css 简单介绍 css : 就是 html 标签的 衣服，化妆品，将网页打扮的更加漂亮 1. css基本语法​ 创建一个css 样式 12div &#123;color：red；font-size:16px&#125;选择器 &#123;属性名：属性值 ....&#125; 2. css如何引入 行内引入 直接在标签中写 1&lt;p style="color: red"&gt;Hello world.&lt;/p&gt; 内部样式写入 放在网页的 中 123456789&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; p&#123; background-color: #2b99ff; &#125; &lt;/style&gt;&lt;/head&gt; 外部样式写入 单独文件，需要引入（实际开发中基本都是这样的） 1&lt;link href="mystyle.css" rel="stylesheet" type="text/css"/&gt; 3.css 选择器 基本选择器 元素选择器 p {color: &quot;red&quot;;} id 选择器 123#i1 &#123; background-color: red;&#125; 类选择器 1234567.c1 &#123; font-size: 14px;&#125;p.c1 &#123; color: red;&#125;p.c1 指的是 找到 标签是 p 并且 class 为 c1 的元素 通用选择器 *{color: white;} 组合选择器 后代选择器 包括下面所有层级，包括儿子与孙子层级 1234/*li内部的a标签设置字体颜色 注意：内部所有 a 标签*/li a &#123; color: green;&#125; 儿子选择器 当前标签下一层 算儿子层级 1234/*选择所有父级是 &lt;div&gt; 元素的 &lt;p&gt; 元素 注意：内部第一层的所有 p （p里面的p就不算）*/div&gt;p&#123; color: green;&#125; 毗邻选择器 注意：仅靠着的div 下面第一个 p 元素（如果div 下面的不是 p标签，那么不生效） 1234/*选择所有紧接着&lt;div&gt;元素之后的&lt;p&gt;元素 */div+p &#123; margin: 5px;&#125; 弟弟选择器 注意：div下方的 所有p 标签，上方的标签 没有作用 1234/*i1后面所有的兄弟p标签*/#i1~p &#123; border: 2px solid royalblue;&#125; 属性选择器 123456p[title] /*用于选取带有指定属性的元素。*/p[title=&quot;213&quot;] /*用于选取带有指定属性和值的元素。*/[title^=&quot;hello&quot;] /*找到所有title属性以hello开头的元素*/[title$=&quot;hello&quot;] /*找到所有title属性以hello结尾的元素*/[title*=&quot;hello&quot;] /*找到所有title属性中包含（字符串包含）hello的元素*/[title~=&quot;hello&quot;] /*找到所有title属性(有多个值或值以空格分割)中有一个值为hello的元素：*/ 分组与嵌套 分组 一个样式 作用于 多个标签 123div, p &#123; color: red;&#125; 嵌套 获取某个标签 内部 的某个标签 class 为c1 的内部的 p 标签 123.c1 p &#123; color: red;&#125; 伪类选择器 某个标签特定状态下的选择器 12345a:link 未访问的链接a:hover 鼠标移动到链接上a:active 选定的链接a:visited 已访问的链接input:focus input输入框获取焦点时样式 伪元素选择器 first-letter 常用 首字母 特殊处理 1234p:first-letter &#123; font-size: 48px; color: red;&#125; before 在当前标签之前固定插入内容并可以设置样式 12345/*在每个&lt;p&gt;元素之前插入内容*/p:before &#123; content:&quot;*&quot;; color:red;&#125; after 在当前标签之后固定插入内容并可以设置样式 12345/*在每个&lt;p&gt;元素之后插入内容*/p:after &#123; content:&quot;[?]&quot;; color:blue;&#125; 说明： before和after多用于清除浮动 before和after 用处很多，比较典型的是 在 某个元素标签之前加固定图标 选择器的优先级 如果一个 两个相互冲突的样式 作用于 同一个 标签上，那么最终由优先级比较高的那个 最为最后起作用的 内联样式 权重 1000 id 选择器 权重 100 类选择器 权重 10 元素选择器 权重 1 important 权重最高 4.css 属性介绍 width &amp; height 也就是 元素的宽高 块级元素才可以设置，行内元素 不能设置 当 box-sizing：content-box width 不包含内边距和border （默认） 当 box-sizing：border-box width 包含内边距和border （使用更方便） 具体的原因和设置，在以后的文章里面 再介绍 字体属性 文字字体 从左到右，电脑里面有就优先使用哪个 123body &#123; font-family: &quot;Microsoft Yahei&quot;, &quot;微软雅黑&quot;, &quot;Arial&quot;, sans-serif&#125; 字体大小 font-size: 14px; 延伸：有一种适配方案就是根据 调整 root-font-size 来做适配方案，后面具体介绍 字重 也就是粗细 nomal 默认粗细 400 bold 粗体 700 bolder 更粗 lighter 更细 100-900 设置具体粗细 inherit 继承父元素字体的粗细值 文本颜色 十六进制 #ffffff RGB值 RGB(255,0,0) 颜色名称 red rgba rgba(255,0,0,0.3) o.3 为透明度 文字 文字对齐 text-align 属性 值 描述 left 默认 左对齐 right 右对齐 center 居中对齐 justify 两端对齐 文字装饰 text-decoration 一般是下划线 之类的 值 描述 none 默认 啥也没有 underline 下划线 overline 上划线 line-through 穿越线 inherit 继承父元素的 text-decoration 属性 首行缩进 123p &#123; text-indent: 32px;&#125; 背景属性 用的比较多 123456789101112131415/*背景颜色*/background-color: red;/*背景图片*/background-image: url('1.jpg');/* 背景重复 repeat(默认):背景图片平铺排满整个网页 repeat-x：背景图片只在水平方向上平铺 repeat-y：背景图片只在垂直方向上平铺 no-repeat：背景图片不平铺*/background-repeat: no-repeat; /*背景位置*/background-position: left top;/*background-position: 200px 200px;*/ 前端雪碧图就是运用background-position来实现，也是优化页面的方式之一 边框 边框属性 border-width border-style border-color 边框的 宽度 线的样式 颜色 border-style 有 none 无边框 dotted 点状虚线边框 dashed 矩形虚线边框 solid 实现边框 12345#i1 &#123; border-width: 2px; border-style: solid; border-color: red;&#125; 一般简写为 123#i1 &#123; border: 2px solid red;&#125; 也可以单独设置一个边的 线条 用的比较多 1234567#i1 &#123; border-top-style:dotted; border-top-color: red; border-right-style:solid; border-bottom-style:dotted; border-left-style:none;&#125; 边框与圆角 一般用于设置 四周圆角与 圆形图片 123img &#123; border-radius: 100px; &#125; display 属性 值 意义 none 不显示 block 块级元素，独占一行 inline 内联元素，无法设置 width height 等一些列属性，宽度高度等都是内部元素的撑开 inline-block 内联元素具有设置 width height 等属性 css 盒子模型 说明：盒子模型是一个概念，css 布局就像一个盒子 有 margin border padding （现实中的盒子是不是也是有这样的特征呢） margin 外边距 123456.margin-test &#123; margin-top:5px; margin-right:10px; margin-bottom:15px; margin-left:20px;&#125; margin: 5px 10px 15px 20px; 简写 *margin: 0 auto; * 居中（常用） padding 内填充 123456.padding-test &#123; padding-top: 5px; padding-right: 10px; padding-bottom: 15px; padding-left: 20px;&#125; padding: 5px 10px 15px 20px; 简写 上右下左 浮动 float 浮动在css 中是一个很重要的 布局概念，即脱硫了 正常的流式布局，可以 我们认为的控制它的布局 后面会单独介绍 left 左浮动 right 有浮动 none 默认值 不浮动 clear 清除 clear 用于 清除浮动 ，配合在 float 之后用的 值 描述 left 清除左侧浮动元素 right 清除右侧浮动元素 both 清除两侧浮动元素 none 偶人值 允许浮动 inherit 规定应该从父元素继承 clear 属性的值 如何清除浮动 （有浮动会造成 父元素塌陷，样式很丑） 固定高度 *伪元素清除 *（一般都是这种多） overflow：hidden 12345.clearfix:after &#123; content: ""; display: block; clear: both;&#125; 溢出 overflow 值 描述 visible 默认值。若有益处，不会被裁剪 hidden 多余内容被裁剪，不可见 scroll 内容被裁剪 ，会以滚动条形式 检查其他内容 auto 若内容溢出，浏览器会自动以滚动条形式显示 inherit 继承父级元素的 此属性 overflow （水平和垂直方向都有设置） overflow-x （仅水平方向） overflow-y （设置垂直方向） 定位 postion 非常重要 static 默认值，无定位 relative 相对定位 不脱离文档流 相对与 自身 定位 top right bottom left 相对与自身原来的位置 偏移的量 absoult 绝对定位 脱离文档流 相对与 父级 的非 static 的 元素 来定位 偏移，如果 父级 是 static，那么逐层向上找，直到 body fixed 固定 脱离文档流 这个相对与浏览器窗口来定位，脱离了文档流 z-index z轴时间 z 轴 上的值，值越高，那么越在上面，离用户越近 同一个位置，z 值越大，可以 覆盖这 z 值小的 float 布局的不存在 这个 z 的一说 如果 该元素的父级 不可见，那么 该元素 z 再大，也看不到 透明度 opacity 透明度 0-1， 0 完全透明 1 完全不透明]]></content>
  </entry>
  <entry>
    <title><![CDATA[前端-html]]></title>
    <url>%2F2019%2F07%2F30%2F%E5%89%8D%E7%AB%AF-html%2F</url>
    <content type="text"><![CDATA[html 本文是对html 基本知识的介绍 简单介绍1. web 服务到底是什么 web 服务，也就是 从浏览器 输入 url 地址 浏览器解析 url 地址，找到最近的 DNS 找到 对应的 ip地址 根据 ip 地址，找到 对应的服务器 服务器 给出对应的 内容 返回给 浏览器（返回的内容 就是一串 特殊的字符 — 就是 HTML） 浏览器 拿到 Html 内容 解析 （包括 html 标签 css js） 根据 一定的规则 渲染到 页面上 2. html是什么 html（超文本标记语言） 说白了就是 浏览器 能识别的 网页语言 脱硫浏览器，啥也不是 不同浏览器 解析的规则有一定的差异（其中，最著名的就是 IE，万恶之源） 以 .html 和 .htm 结尾 3. html 文档结构123456789&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;标题&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; &lt;!DOCTYPE html&gt; 代表 用 htnl5 的标准来解析（默认），当然也可以选择 用 htnl4 等更低版本的版本来解析 html 在最外层 包含 header 和body 4. html 标签的格式 &lt;标签名&gt;&lt;/标签名&gt; 一般以 这样的格式出现 （&lt;标签名/&gt; 也有这样的） 可以加 属性 key=value 的形式 &lt;div id=&#39;abc&#39;&gt;&lt;/div&gt; 插入style &lt;div style=&#39;color = &quot;red&quot;&#39;&gt;&lt;/div&gt; 标签1. html 配置说明 以及 header 标签 &lt;html&gt; 最外层标签 （!DOCTYPE 代表 用html5 的标准解析） &lt;style&gt;&lt;/style&gt; 用于包裹或则引入 css 样式 &lt;script&gt;&lt;/script&gt; 用于 包裹 或则引入 js 代码 &lt;link/&gt; 引入外部文件（包括图片） &lt;header&gt; 里面包含其他标签，主要用来说明 网站信息 &lt;title&gt;网页标题 &lt;meta&gt; 元信息，里面包含很多其他的配置 说明： 主要是 描述 此页面 的介绍信息，有利于 SEO 信息 不展示给用户 具体标签： 属性 .http-equiv 告诉浏览器 解析 文档时候的参数 123456&lt;!--指定文档的编码类型--&gt;&lt;meta http-equiv="content-Type" charset=UTF8"&gt; &lt;!--2秒后跳转到对应的网址，注意引号--&gt;&lt;meta http-equiv="refresh" content="2;URL=https://www.baidu.com"&gt;&lt;!--告诉IE以最高级模式渲染文档--&gt;&lt;meta http-equiv="x-ua-compatible" content="IE=edge"&gt; 属性name, 相当于 网页的简介 12&lt;meta name="keywords" content="meta总结,html meta,meta属性,meta跳转"&gt;&lt;meta name="description" content="meta总结"&gt; 2. 常用标签 常用标签一览 1234567891011121314151617181920212223242526272829303132333435363738&lt;div&gt;容器&lt;/div&gt;&lt;span&gt;容器&lt;/span&gt;&lt;a&gt;链接&lt;/a&gt;&lt;ul&gt; &lt;li&gt;列表&lt;/li&gt;&lt;/ul&gt;&lt;table&gt;... 表格&lt;/table&gt;输入框&lt;input/&gt;&lt;select&gt;下拉框&lt;/select&gt;&lt;b&gt;加粗&lt;/b&gt;&lt;i&gt;斜体&lt;/i&gt;&lt;u&gt;下划线&lt;/u&gt;&lt;s&gt;删除&lt;/s&gt;&lt;p&gt;段落标签&lt;/p&gt;&lt;h1&gt;标题1&lt;/h1&gt;&lt;h2&gt;标题2&lt;/h2&gt;&lt;h3&gt;标题3&lt;/h3&gt;&lt;h4&gt;标题4&lt;/h4&gt;&lt;h5&gt;标题5&lt;/h5&gt;&lt;h6&gt;标题6&lt;/h6&gt;&lt;!--换行--&gt;&lt;br&gt;&lt;!--水平线--&gt;&lt;hr&gt; 标签 代表什么 div 容器 span 容器 ul li 列表 table 表格 input 输入框 select 下拉框 b 加粗 i 斜体 u 下划线 s 删除 p 段落 h1 ~ h6 标题1 ~标题6 br 换行 hr 水平线（华丽的分割线） 特殊字符一览 代码(最后加分号) 展示内容 &amp;nbsp 空格 &amp;gt &gt; &amp;lt &lt; &amp;amp &amp; &amp;yen ¥ &amp;copy 版权 © &amp;reg 注册 div 与 span 标签 div 与 span 都没有什么特殊的意义，就是一个 空白标签 div 与 span 很重要，是作为 容器用的，主要用于布局 div 是 块级标签，span 是行内标签。这在布局的时候有很大的区别 块级标签独占一行，有width height margin padding 等 行内元素 不独占一行，width height 都是通过 css 没有办法设置，就是自身内容的大小 a 标签 - 超链接标签 就是点击可以直接跳转到一个 其他的地方，具体跳转到哪里，由你自己设置与规定（可以是一个 地址，文件，图片，邮箱） 12345678&lt;a href="http://www.baidu.com" target="_blank" &gt;点我&lt;/a&gt;href: 链接地址 1.绝对路径 www.baidu.com 跳到互联网中的一个 网址 2. 相对路径 “about.html” 跳到本站点的一个 地址 3. 锚点 “#top” 跳到页面中 top 的锚点处（id=‘top’）target： 规定如何跳转 1._black 在新标签中打开目标网页 2._self 表示在当前标签页中打开网页（本页面之前的网页没有了，换成 新的） 列表 无序列表 1234&lt;ul type='disc'&gt; &lt;li&gt;one&lt;/li&gt; &lt;li&gt;two&lt;/li&gt;&lt;/ul&gt; type的属性： disc - 实心圆（默认） circle - 空心圆 square - 实体方块 none - 无样式 （实际开发中，统一会设置为 none） 有序列表 123456&lt;ol type="1" start="2"&gt; &lt;li&gt;one&lt;/li&gt; &lt;li&gt;two&lt;/li&gt;&lt;/ol&gt;start="2"从 2 开始（不是从1 开始） type的属性： 1 数字列表 A 大写字母 a 小写字母 I 大写罗马数字 i 小写罗马数字 标题列表 1234567&lt;dl&gt; &lt;dt&gt;标题1&lt;/dt&gt; &lt;dd&gt;内容1&lt;/dd&gt; &lt;dt&gt;标题2&lt;/dt&gt; &lt;dd&gt;内容1&lt;/dd&gt; &lt;dd&gt;内容2&lt;/dd&gt;&lt;/dl&gt; 表格 理解成为 我们的 excel 就可以了 123456789101112131415161718192021&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;序号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;爱好&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;张三&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;李四&lt;/td&gt; &lt;td&gt;女&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; 属性一览 boder 表格边框 cellpadding 内表框 cellspacing 外边框 width 宽度 rowspan 单元格竖跨多少行 （合并单元格） colspan 单元格横跨多少列 （合并单元格） input input 变种很多，通过 type 设置即可 1&lt;input type='text'name='name'&gt; 属性一览表 type属性值 表现形式 对应代码 text 单行输入 &lt;input type=&quot;text&quot; /&gt; password 密码输入 &lt;input type=&quot;password&quot; /&gt; date 时间控件 &lt;input type=&quot;date&quot; /&gt; checkbox 复选框 &lt;input type=&quot;password&quot; checked=&quot;checked&quot; /&gt; radio 单选框 &lt;input type=&quot;radio&quot; /&gt; file 文件选择 &lt;input type=&quot;file&quot; /&gt; submit 提交按钮 &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt; reset 重置按钮 &lt;input type=&quot;submit&quot; value=&quot;重置&quot; /&gt; button 普通输入框 &lt;input type=&quot;submit&quot; value=&quot;普通&quot; /&gt; hidden 隐藏输入框 &lt;input type=&quot;hidden&quot; value=&quot;看不到&quot;&gt; 属性说明： name input 的名字，form提交的时候 key的名字 value： type = button reset submit hiddne 按钮显示的字 type = text password 输入框的 值 type = checkbox radio file checked ： radio 与 checkbox 当前选项是否 被选中 readonly ： text password 不可编辑 disabled ： 全部禁用 select 下拉选择框 123456&lt;select name="city" id="city"&gt; &lt;option value="1"&gt;北京&lt;/option&gt; &lt;option selected="selected" value="2"&gt;上海&lt;/option&gt; &lt;option value="3"&gt;广州&lt;/option&gt; &lt;option value="4"&gt;深圳&lt;/option&gt;&lt;/select&gt; 属性说明： 属性值 含义 disabled 当前 选项 禁用 selected 当前 选项 选中 value 当前 option 选项 选中传递的 值 textarea 多行文本 123&lt;textarea name="memo" id="memo" cols="30" rows="10"&gt; 默认内容&lt;/textarea&gt; 属性说明： 属性值 含义 name 名称 rows 行数 cols 列数 disabled 禁用 form 表单 是一个抽象的 标签，里面是 其他 标签的集合，主要用于与 后端交互 1234&lt;form action=""&gt; &lt;label for="username"&gt;用户名&lt;/label&gt; &lt;input type="text" id="username" name="username"&gt;&lt;/form&gt; 属性说明： 属性值 含义accept accept-charset 提交表单时使用的字符集（默认：页面字符集） action 提交的地址 url autocomplete 浏览器是否自动完成表单（默认：开启） enctype 提交数据的编码 （默认： url-encoded） method HTTP 方法（默认：get） name 表单的名字（document.forms.name） novalidate 浏览器是否校验表单 target action 中 地址 url 链接方式 （默认：_self）]]></content>
      <tags>
        <tag>web 前端 html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack-basics]]></title>
    <url>%2F2019%2F07%2F25%2Fwebpack-basics%2F</url>
    <content type="text"><![CDATA[useage 这篇文档是 按照webpack官网 步骤 学习webpack 知识，有代码，有相应的说明，有总结 也有对官网代码实现过程不一致的地方的记录，欢迎一起交流学习 webpack-demo-1 基本安装 webpack-demo-2 如何创建一个 bundle 文件 webpack-demo-3 如何使用配置文件 （webpack.config.js） webpack-demo-4-assets css 的加载 css-loader style-loader 图片css 用 file-loader，（压缩图片 image-webpack-loader 和 url-loader） 字体的加载 file-loader 数据文件的加载 csv-loader xml-loader webpack-demo-5-output-manahement 输出多个 bundle.js 文件 html-webapck-plugin 的使用 clean-webpack-plugin 清理文件 延伸 知识： 代码分离 webpack-demo-6-devServer 主要就是 介绍了 自动编译 inlie-source-map : 这个不是 插件，是webpack 自带的，只需要配置一下即可，作用：开发环境 生成 代码的 souce-map, 出错找到对应的 文件，而不是编译之后的 bundle.js 文件 watch webpack-dev-server webpack-dev-minddleware 三选一即可，都有 自动检测代码跟新 再次编译的 功能 watch 最简单，只需要 webpack watch 即可 webpack-dev-server 是个插件，需要配置一下，高度集成在 webpack 中 （底层就是基于 webpack-dev-middleware 实现的 包含了 HRM 的功能） webpack-dev-middleware 也可以单独使用，结合 express 等web 框架，（是一个容器，与HRM不一样，其实 可以理解为 自己 实现一个 webpack-dev-server的功能） webpack-demo-7-devServer 主要介绍了 热跟新 的内容 devServer 中启用 hot：true webpack dev server 与 node 一起使用的时候 ，建议 单独一个文件启用，不要把 webpack-dev-server 与 webpack.config.js , 耦合在一起 热跟新 会遇到很多问题，跟新之后，很多事件需要重新绑定，样式等等需要重新渲染，借助 各自提供的loader 会在内部直接解决，(vue react css等loader 内部已经帮我们实现了，所以用的时候很省心，但是我们需要有这样的情况) webpack-demo-8-treeSharking 主要介绍 tree sharking 移除没有引入的代码 （慎用） 当impot {abc} from module ，打包时 去除 moudle 除了 abc 的方法 如何配置 找出 那些无用代码 “sideEffects”: false，代表所有的都 执行 treeSharking ，或则 [‘./abc.js’] 单独排除 abc.js 文件 压缩代码 ，使用wwebpack 自带的 uglifyJSplugin 代码压缩插件 插件必须支持去除无用代码才行 mode: “production” webpack –optimize-minimize 本案列中 实际 展示效果并不完全一致 唯一展示验证的一点是：当sideEffects：[],不包含 *.css ，那么css 样式被当做无用代码 移除了]]></content>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[makedowm常用指令]]></title>
    <url>%2F2019%2F07%2F23%2Fmakedowm%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[常用makedowm 指令的记录 // 标题 http://support.typora.io/Markdown-Reference/This is an H1This is an H2This is an H6// 引用块 This is a blockquote with two paragraphs. This is first paragraph. // 列表 Red 无序列表 Green Blue Red 有序列表 Green Blue // 任务列表 a task list item list syntax required normal formatting, @mentions, #1234 refs incomplete completed // 代码块​​1234require 'redcarpet'markdown = Redcarpet.new("Hello World!")puts markdown.to_html​ // 公式$$\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix}\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \\frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \\end{vmatrix}$$ // 表格 First Header Second Header Content Cell Content Cell Content Cell Content Cell // — Left-Aligned Center Aligned :———— :—————: col 3 is some wordy text col 2 is centered zebra stripes are neat //助脚的使用 — You can create footnotes like this[^footnote]. [^footnote]: Here is the text of the footnote. // 水平线 — *** // 链接 — This is an example inline link. This link has no title attribute. // 图片 — // 强调 斜体 == — single asterisks single underscores // 强调 加粗 == double asterisks double underscores // 代码Use the printf() function. // 删除线Mistaken text. becomes Mistaken text. // 下划线Underline becomes Underline.]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文章规划]]></title>
    <url>%2F2019%2F07%2F23%2F%E6%96%87%E7%AB%A0%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[下面是要写的 文章规划 以及 文章的目录 文章规划环境&amp;&amp;工具 教程：如何通过webpack搭建vue多页面框架 纯手写一个 vue 的 webpack 纯手写一个 多页面 vue 的webpack 框架 纯手写一个 Reat 的webpack git 教程系列 编程语言 基础知识 javastript 基础知识 python 基础知识 文章目录前端相关 前端-html 前端-css 前端-js 前端BOM与DOM 前端基础-框架-jquery webpack-basics js环境之node 后端相关（python） python之Pycharm配置与安装 python之python环境配置安装 django快速体验 数据库相关（MySQL） mysql基础-数据库简介与安装启动l mysql基础-基础操作 前端-html]]></content>
  </entry>
  <entry>
    <title><![CDATA[test3]]></title>
    <url>%2F2019%2F07%2F22%2Ftest3%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[功能 图片 查看更过 作者 置顶 标签]]></title>
    <url>%2F2019%2F07%2F22%2Ftest%2F</url>
    <content type="text"><![CDATA[起水后的孙杨一如既往地向观众致意，随后他振臂高呼了两次，庆贺自己的四连冠和第十金。7月21日，韩国光州游泳世锦赛展开游泳项目的争夺，中国选手孙杨以3分42秒44的成绩斩获男子400米自由泳金牌，不仅实现了该项目的个人世锦赛四连冠，同时也斩获了个人的世锦赛第十金。 “能够实现四连冠，成为自由泳历史上第一人，是对我之前训练的肯定。第一项决赛不好比，但是每个人都一样，到最后我就是咬牙，训练练到了，我就能坚持到底。”27岁的孙杨一直在挑战自我。赛前外教丹尼斯没有给孙杨太多要求，而是告诉他，你现在能力很强，要把之前的训练成果展示给大家看。孙杨说：“之前训练练得非常好，但确实太累了。在这样的年纪达到这个水平非常不容易，很少有人能长时间保持在高水平上，这对我来说是至高无上的荣誉。”孙杨坦言在收获了诸多荣誉之后，依旧勇往直前就是要为荣誉而战，而这背后的艰辛与付出只有他自己知道。 从2012年开始到现在，孙杨在国际赛场400米自由泳项目上的表现可谓是统治级的，他仅在2016年里约奥运会上让金牌旁落，遗憾以0.13秒之差输给了澳大利亚选手霍顿。而在21日的决赛中，霍顿则再次败给了孙杨，他以0.73秒之差斩获一枚银牌。在赛后的颁奖仪式上，霍顿全程未登上领奖台，领奖后拒绝与孙杨和季军意大利选手德蒂合影。对此，孙杨在赛后发布会上进行了正面回应：“他想通过这样的举动影响我在赛道上的发挥，但我就做好自己该做的。你可以对我有意见，但颁奖是非常神圣的，每个人都代表自己的国家。” 本次世锦赛孙杨还将参加200米、800米自由泳以及接力比赛，其中200米自由泳项目是他另一个力保的项目。对于明年东京奥运会新增项目800米自由泳，孙杨同样要全力去拼，一方面检验训练成果，同时也参考各国选手的表现来更加科学地制定下一步的训练规划。（李雪颖/文 安灵均/图）]]></content>
      <categories>
        <category>日记</category>
        <category>生活</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>文学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F22%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
