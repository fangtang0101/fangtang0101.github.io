<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>not only code</title>
  
  <subtitle>not only code , love life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fangtang0101.github.io/"/>
  <updated>2019-08-05T10:02:31.977Z</updated>
  <id>https://fangtang0101.github.io/</id>
  
  <author>
    <name>fangtang0101</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python之Pycharm配置与安装</title>
    <link href="https://fangtang0101.github.io/2019/08/05/python%E4%B9%8BPycharm%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <id>https://fangtang0101.github.io/2019/08/05/python之Pycharm配置与安装/</id>
    <published>2019-08-05T10:02:31.000Z</published>
    <updated>2019-08-05T10:02:31.977Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python之python环境配置安装</title>
    <link href="https://fangtang0101.github.io/2019/08/05/python%E4%B9%8Bpython%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/"/>
    <id>https://fangtang0101.github.io/2019/08/05/python之python环境配置安装/</id>
    <published>2019-08-05T10:01:41.000Z</published>
    <updated>2019-08-06T02:33:45.039Z</updated>
    
    <content type="html"><![CDATA[<p>关于python 的安装</p><a id="more"></a><p><strong>网址</strong><a href="https://www.python.org/downloads/windows/" title="Title" target="_blank" rel="noopener">点击这里</a></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/python%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/1.png" alt="Alt text"></p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/python%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/2.png" alt="Alt text"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/python%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/3.png" alt="Alt text"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/python%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/4.png" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于python 的安装&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js环境之node</title>
    <link href="https://fangtang0101.github.io/2019/08/05/js%E7%8E%AF%E5%A2%83%E4%B9%8Bnode/"/>
    <id>https://fangtang0101.github.io/2019/08/05/js环境之node/</id>
    <published>2019-08-05T08:58:50.000Z</published>
    <updated>2019-08-05T09:50:48.987Z</updated>
    
    <content type="html"><![CDATA[<p>node 简介以及安装教程，多图</p><a id="more"></a><h4 id="node-是什么"><a href="#node-是什么" class="headerlink" title="node 是什么"></a>node 是什么</h4><ul><li>node 是 node.js 的运行环境，但是 随着 前端 的 不断发展，不管你搞不搞后端，node 的包管理等各个理念已经深入人心，基本作为必备技能之一</li><li>npm 是 node 自带的包管理工具，我们只需要下载 node，那么就集成了 npm 的安装</li></ul><h4 id="本机坏境说明"><a href="#本机坏境说明" class="headerlink" title="本机坏境说明"></a>本机坏境说明</h4><ul><li>window 64<h4 id="node-amp-npm-如何查看版本"><a href="#node-amp-npm-如何查看版本" class="headerlink" title="node &amp; npm 如何查看版本"></a>node &amp; npm 如何查看版本</h4></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="https://github.com/fangtang0101/ft-images/raw/master/js/node/1.png" alt="Alt text" title="Optional title"></p><h4 id="node-如何卸载"><a href="#node-如何卸载" class="headerlink" title="node 如何卸载"></a>node 如何卸载</h4><p><strong>由于本机已经安装好，所以我们先从卸载开始</strong></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/js/node/2.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/js/node/3.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/js/node/4.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/js/node/5.png" alt="Alt text" title="Optional title"></p><h4 id="node-如何下载安装"><a href="#node-如何下载安装" class="headerlink" title="node 如何下载安装"></a>node 如何下载安装</h4><p><img src="https://github.com/fangtang0101/ft-images/raw/master/js/node/6.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/js/node/7.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/js/node/8.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/js/node/9.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/js/node/10.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/js/node/11.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/js/node/12.png" alt="Alt text" title="Optional title"></p><h4 id="常见问题说明"><a href="#常见问题说明" class="headerlink" title="常见问题说明"></a>常见问题说明</h4><ul><li><p>如何将路径加到path里面</p><p>很多时候也不知道什么原因，安装成功，但是不能全局使用，此时需要手动将 node 放到path 路径李敏</p><ol><li><p>如何判断 是否已经安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1/<span class="built_in">cd</span> 进 node 的安装目录 （我的是）F:\cx\node</span><br><span class="line">//注意 window 切换 根目录 先 F:     回车</span><br><span class="line"> node -v </span><br><span class="line"> //如果安装好了，那么会显示版本号，如果显示没有此命令，那么就是node 没有安装好</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li><p>如何查看是否已经加入path 路径</p><p><strong>直接打开cmd 输入 node-v，如果path 已经添加好，那么会显示版本号，如果没有此命令，那么就是path没有node路径</strong></p></li><li><p>如何添加到 全局变量中</p><ul><li>计算机（右击）-  属性（高级系统设置） -  高级 - 环境变量 - 系统变量</li><li>找到 path 双击</li><li>在最后 追加 ：F:\cx\node</li></ul><p><img src="https://github.com/fangtang0101/ft-images/raw/master/js/node/13.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/js/node/14.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/js/node/15.png" alt="Alt text" title="Optional title"></p></li></ol><p>​     </p><p>​     </p><p>​     </p><p>​     </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;node 简介以及安装教程，多图&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>django快速体验</title>
    <link href="https://fangtang0101.github.io/2019/08/05/django%E5%BF%AB%E9%80%9F%E4%BD%93%E9%AA%8C/"/>
    <id>https://fangtang0101.github.io/2019/08/05/django快速体验/</id>
    <published>2019-08-05T05:53:03.000Z</published>
    <updated>2019-08-14T03:11:22.938Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍 Django的安装 并 快速体验</p><a id="more"></a><h3 id="快速体验"><a href="#快速体验" class="headerlink" title="快速体验"></a>快速体验</h3><h4 id="前提注意事项"><a href="#前提注意事项" class="headerlink" title="前提注意事项"></a>前提注意事项</h4><ul><li>计算机名字 不能含有中文</li><li>尽量 用 Pycharm 单独用窗口打开一个工程</li><li>项目文件夹不要有中文</li><li>django 尽量选择 1.11.11 的版本（比较稳定）</li></ul><h4 id="pip-安装-并-体验"><a href="#pip-安装-并-体验" class="headerlink" title="pip 安装 并 体验"></a>pip 安装 并 体验</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install django==1.11.11  //安装 指定版本的 django</span><br><span class="line">$ django-admin startproject 项目名</span><br><span class="line">$ django-admin startapp 应用名</span><br><span class="line">$ django-admin start 应用名 （注意需要cd 到 应用名的目录下面）</span><br></pre></td></tr></table></figure><h4 id="Pycharm-安装-并体验"><a href="#Pycharm-安装-并体验" class="headerlink" title="Pycharm 安装 并体验"></a>Pycharm 安装 并体验</h4><p><strong>直接通过 创建一个 django 项目，会自动检测安装 django，默认会安装 最新版本，然后通过修改版本号码，修改django的版本</strong></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/1.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/2.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/3.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/4.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/5.png" alt="Alt text" title="Optional title"></p><h4 id="如何判断-是否-成功"><a href="#如何判断-是否-成功" class="headerlink" title="如何判断 是否 成功"></a>如何判断 是否 成功</h4><p><strong>当看到控制台显示网站，点击浏览，看到 页面上显示 it worked 成功了</strong></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/5.png" alt="Alt text" title="Optional title"></p><h4 id="django-三板斧"><a href="#django-三板斧" class="headerlink" title="django 三板斧"></a><code>django</code> 三板斧</h4><p><strong>前提：每次添加一个路由（路径），需要在 urls.py 中 添加对应的 映射，然后在 views.py 中返回对用的内容</strong></p><ol><li><code>HttpResponse</code>:返回字符串</li><li><code>render</code> 返回html 文件</li><li><code>redirect</code> 重定向</li></ol><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/6.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/7.png" alt="Alt text" title="Optional title"></p><h4 id="django-静态文件的处理"><a href="#django-静态文件的处理" class="headerlink" title="django 静态文件的处理"></a><code>django</code> 静态文件的处理</h4><p><strong>在html 引用 服务器中的 图片 css js 文件等 ，如果每个文件都 写一个路由很麻烦，否则 是访问不了的，所以Django提供相对应的设置文件夹为 静态文件</strong></p><ul><li><p>未做处理访问静态文件</p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/8.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/9.png" alt="Alt text" title="Optional title"></p></li></ul><ul><li><p>处理指定之后 访问静态文件</p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/10.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/11.png" alt="Alt text" title="Optional title"></p><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/12.png" alt="Alt text" title="Optional title"></p></li></ul><h4 id="django-mysql-设置"><a href="#django-mysql-设置" class="headerlink" title="django  mysql 设置"></a><code>django</code>  mysql 设置</h4><p><strong>说明：</strong></p><ul><li><p>默认 django 会连接自身带着的 db.sqlite3 </p></li><li><p><code>django</code> 支持连接 市面上 绝大多数的 数据库（mysql sqlserver 等）</p></li><li><p>连接每个不同的数据库 需要 安装不同 的 对应的 包</p></li></ul><p><strong>具体配置：</strong></p><ul><li><p>文件中的配置  setting 中 配置 如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  django 默认自带一个小型的 sqlite3 的数据库，我们需要手动将其改掉</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment"># 'default': &#123;</span></span><br><span class="line">    <span class="comment">#     'ENGINE': 'django.db.backends.sqlite3',</span></span><br><span class="line">    <span class="comment">#     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="string">'default'</span>:&#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,   <span class="comment"># 告诉 Django 不要数据库 使用 mysql</span></span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'app01'</span>,                        <span class="comment"># 数据库的名字</span></span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,                         <span class="comment"># 用户名</span></span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,                         <span class="comment"># 密码</span></span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,                    <span class="comment"># host 对应的ip</span></span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">3306</span>,                           <span class="comment"># 指定端口</span></span><br><span class="line">        <span class="string">'CHARSET'</span>: <span class="string">'utf8'</span>                       <span class="comment"># 字符编码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>其他配置</p><p><strong>对应的应用名下的  <strong>init</strong>.py 或则 项目名下 的  <strong>init</strong>.py 文件中 告诉django 不要使用默认的mysqld_db 模块 而是使用 pymysql</strong></p><p><strong>需要安装对应的包 pymysql</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></li></ul><h4 id="django-ORM"><a href="#django-ORM" class="headerlink" title="django  ORM"></a><code>django</code>  ORM</h4><ul><li><p>什么是 ORM</p><p>ORM 是 数据库中的表 与 python 中类与对象的对应关系</p><p>类 =  数据库的表</p><p>对象 =  数据库中的每一条 表记录</p><p>对象.属性 =  表记录中某个字段的值</p></li></ul><ul><li><p>优缺点</p><p><strong>优点：</strong>操作简单，即时不会数据库的人使用，也是可以轻松操作数据库</p><p><strong>缺点</strong>：有时候 效率会 比较底下（毕竟 经过封装）</p></li><li><p>注意点：</p><ul><li><p><code>Django</code> 的 ORM 不会 帮你创建 数据库，创建的是表 ，和数据的增删改查</p></li><li><p>关于 ORM 中的代码 全部在 models.py 中 写</p></li><li><p>关于表的 配置 改变（表的创建，字段的配置修改），最后都需要 执行 下面的代码 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py makemigrations  将数据的更改操作记录到小本本上</span><br><span class="line"></span><br><span class="line">python3 manage.py migrate  将更改真正同步到数据库</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>具体操作（数据的增删改查）</p><ul><li><p>增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. create()</span><br><span class="line">models.User.object.create(kwargs)  // 返回当前创建的对象</span><br><span class="line">2. 对象.save()</span><br><span class="line">user_obj = models.User()</span><br><span class="line">user_obj.username = &apos;zhangsan&apos;</span><br><span class="line">user_obj.password = &apos;123&apos;</span><br><span class="line">user_obj.save()</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>删</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryset对象.delete()</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> update()</span><br><span class="line">   models.User.objects.filter(kwargs).update()</span><br><span class="line">   批量更新</span><br><span class="line"><span class="number">2.</span>对象.save()</span><br><span class="line">  user_obj = models.User(kwargs)</span><br><span class="line">  user_obj.username = <span class="string">'zhangsan'</span></span><br><span class="line">  user_obj.save()</span><br><span class="line">  效率较低</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> all() 查询所有 不需要传递参数</span><br><span class="line"><span class="number">2.</span> filter（kwargs）  结构是一个 queryset 对象</span><br></pre></td></tr></table></figure><p><img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/13.png" alt="Alt text" title="Optional title"></p></li></ul><h4 id="增删改查-综合案列"><a href="#增删改查-综合案列" class="headerlink" title="增删改查 综合案列"></a>增删改查 综合案列</h4><p>  <img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/14.png" alt="Alt text" title="Optional title"></p><h4 id="Pycharm-中数据库可视化工具"><a href="#Pycharm-中数据库可视化工具" class="headerlink" title="Pycharm 中数据库可视化工具"></a>Pycharm 中数据库可视化工具</h4><p>   <img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/15.png" alt="Alt text" title="Optional title"></p><p>  <img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/16.png" alt="Alt text" title="Optional title"></p><p>  <img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/17.png" alt="Alt text" title="Optional title"></p><p>  <img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/18.png" alt="Alt text" title="Optional title"></p><h4 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h4><ul><li><p>post 请求出现问题<br>  <img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/19.png" alt="Alt text" title="Optional title"></p></li><li><p>本地数据库连接不上</p><p><strong>本地数据库必须开启</strong></p><p><strong>对应的数据库必须自己手动创建，Django 创建的是 table</strong></p></li><li><p>template 无法访问问题<br><img src="https://github.com/fangtang0101/ft-images/raw/master/python/Django%E5%88%9D%E4%BD%93%E9%AA%8C/20.png" alt="Alt text" title="Optional title"></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍 Django的安装 并 快速体验&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端基础-框架-jquery</title>
    <link href="https://fangtang0101.github.io/2019/08/02/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%A1%86%E6%9E%B6-jquery/"/>
    <id>https://fangtang0101.github.io/2019/08/02/前端基础-框架-jquery/</id>
    <published>2019-08-02T01:46:57.000Z</published>
    <updated>2019-08-02T09:47:08.268Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要简单介绍 前端框架 jQuery ，当然也是 基础的部分</p><a id="more"></a><h3 id="jQuery-简介"><a href="#jQuery-简介" class="headerlink" title="jQuery 简介"></a>jQuery 简介</h3><h4 id="jQuery-是什么"><a href="#jQuery-是什么" class="headerlink" title="jQuery 是什么"></a>jQuery 是什么</h4><ul><li>jQuery 是 js 的一个 库，相当于 python的 一个模块</li><li>jQuery 是封装了 原生 js 的 一系列 方法的集合</li></ul><h4 id="jQuery-能干什么"><a href="#jQuery-能干什么" class="headerlink" title="jQuery 能干什么"></a>jQuery 能干什么</h4><ul><li>对HTML标签的 增删改查</li><li>修改标签的 属性</li><li>修改css 的增删改查</li><li>ajax 异步请求的封装</li><li>事件绑定</li></ul><h4 id="jQuery-与原生js-操作对比（更简单）"><a href="#jQuery-与原生js-操作对比（更简单）" class="headerlink" title="jQuery 与原生js 操作对比（更简单）"></a>jQuery 与原生js 操作对比（更简单）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生js</span></span><br><span class="line"><span class="keyword">var</span> dEle =<span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line">dEle.style.color = <span class="string">'red'</span>;</span><br><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">'div'</span>).css(<span class="string">'color'</span>,<span class="string">'blue'</span>);</span><br></pre></td></tr></table></figure><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="jQuery-如何配置"><a href="#jQuery-如何配置" class="headerlink" title="jQuery 如何配置"></a>jQuery 如何配置</h4><ul><li>将 jQuery 包下载下来，然后 src 标签 引入</li><li>直接引用线上 cdn 地址</li></ul><h4 id="jQuery-基本选择器"><a href="#jQuery-基本选择器" class="headerlink" title="jQuery 基本选择器"></a>jQuery 基本选择器</h4><ul><li><p>jQuery 基本选择器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>)</span><br><span class="line">$(<span class="string">'.ci'</span>)</span><br><span class="line">$(<span class="string">'#d1'</span>)</span><br><span class="line"><span class="number">1.</span> $ 简写 代替 jQuery</span><br><span class="line">2. 括号后面直接 跟 选择器 （需要带  # . 来表示不同的 选择器类型）</span><br></pre></td></tr></table></figure></li><li><p>jQuery 对象 与 js原生对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>jQuery 对象是个 数组，按照 索引去除里面单个元素就是 原生js 对象，所以两者是不一样的</span><br><span class="line"><span class="number">2.</span>js 转jQ</span><br><span class="line"><span class="keyword">var</span> d1Ele = <span class="built_in">document</span>.getElementByTagName(<span class="string">'div'</span>);</span><br><span class="line">$(d1Ele)</span><br><span class="line"><span class="number">3.</span>jQ 转 js</span><br><span class="line">$(<span class="string">'div'</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li></ul><h4 id="jQuery-属性查找-与-操作"><a href="#jQuery-属性查找-与-操作" class="headerlink" title="jQuery 属性查找 与 操作"></a>jQuery 属性查找 与 操作</h4><ul><li><p>三种基本选择器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. id 选择器</span></span><br><span class="line">$(<span class="string">'#id'</span>)</span><br><span class="line"><span class="comment">//2. 标签选择器</span></span><br><span class="line">$(<span class="string">'div'</span>)</span><br><span class="line"><span class="comment">//3. class 选择器</span></span><br><span class="line">$(<span class="string">'.className'</span>)</span><br><span class="line"><span class="comment">//4. 配合使用</span></span><br><span class="line">$(<span class="string">'div.c1'</span>)  <span class="comment">// 找到 便签为 div 并且 clss 为 c1 的元素</span></span><br><span class="line">$(<span class="string">'div .c1'</span>) <span class="comment">// 找到 标签为 div 下面的所有 class 为c1 的元素</span></span><br><span class="line"><span class="comment">//5. 所有元素选择器</span></span><br><span class="line">$(<span class="string">'*'</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>层级选择器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'x y'</span>)<span class="comment">// x 所有后代中 y </span></span><br><span class="line">$(<span class="string">'x &gt; y'</span>)<span class="comment">// x 所有儿子 中的 y</span></span><br><span class="line">$(<span class="string">'x + y'</span>)<span class="comment">// 紧挨着 x 后面的 y （所有的弟弟）</span></span><br><span class="line">$(<span class="string">'x ~ y'</span>)<span class="comment">// x 所有 兄弟 中 y   （所有 哥哥 和 弟弟）</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>基本筛选器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">:first<span class="comment">// 第一个</span></span><br><span class="line">:last<span class="comment">// 最后一个</span></span><br><span class="line">:eq(index)<span class="comment">// 索引 为 index 的元素</span></span><br><span class="line">:even <span class="comment">// 匹配 索引为 偶数的元素 （从0开始）</span></span><br><span class="line">:odd<span class="comment">//匹配 所以为  奇数的元素</span></span><br><span class="line">:gt(index)<span class="comment">//索引大于 index 的元素</span></span><br><span class="line">:lt(index)<span class="comment">//  索引小于 index 的元素</span></span><br><span class="line">:not(元素选择器)<span class="comment">//  移除所有 满足 not 条件的 元素</span></span><br><span class="line">：has(元素选择器)<span class="comment">// 只选择 所有 包含 满足has 条件的 元素 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//eg</span></span><br><span class="line">$(<span class="string">"div:has(h1)"</span>)<span class="comment">// 找到所有后代中有h1标签的div标签</span></span><br><span class="line">$(<span class="string">"div:has(.c1)"</span>)<span class="comment">// 找到所有后代中有c1样式类的div标签</span></span><br><span class="line">$(<span class="string">"li:not(.c1)"</span>)<span class="comment">// 找到所有不包含c1样式类的li标签</span></span><br><span class="line">$(<span class="string">"li:not(:has(a))"</span>)<span class="comment">// 找到所有后代中不含a标签的li标签</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>属性选择器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[attribute]<span class="comment">// 有此属性的 元素</span></span><br><span class="line">[arrribute=value]  <span class="comment">//  属性为 value 的元素</span></span><br><span class="line">[arribute!=value] <span class="comment">//  属性 不为 value 的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//eg</span></span><br><span class="line">&lt;input type=<span class="string">"text"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"password"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span>&gt;</span><br><span class="line">$(<span class="string">"input[type='checkbox']"</span>);<span class="comment">// 取到checkbox类型的input标签</span></span><br><span class="line">$(<span class="string">"input[type!='text']"</span>);<span class="comment">// 取到类型不是text的input标签</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>表单筛选器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">:text</span><br><span class="line">:password</span><br><span class="line">:file</span><br><span class="line">:radio</span><br><span class="line">:checkbox</span><br><span class="line"></span><br><span class="line">:submit</span><br><span class="line">:reset</span><br><span class="line">:button</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//表单对象属性:</span></span><br><span class="line">:enabled</span><br><span class="line">:disabled</span><br><span class="line">:checked</span><br><span class="line">:selected</span><br><span class="line"></span><br><span class="line"><span class="comment">// eg1</span></span><br><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;input name=<span class="string">"email"</span> disabled=<span class="string">"disabled"</span> /&gt;</span><br><span class="line">  &lt;input name=<span class="string">"id"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$("input:enabled")  /</span><span class="regexp">/ 找到可用的input标签</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ eg2</span></span><br><span class="line"><span class="regexp">&lt;select id="s1"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value="beijing"&gt;北京市&lt;/</span>option&gt;</span><br><span class="line">  &lt;option value=<span class="string">"shanghai"</span>&gt;上海市&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option selected value="guangzhou"&gt;广州市&lt;/</span>option&gt;</span><br><span class="line">  &lt;option value=<span class="string">"shenzhen"</span>&gt;深圳市&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>select&gt;</span><br><span class="line"></span><br><span class="line">$(<span class="string">":selected"</span>)  <span class="comment">// 找到所有被选中的option</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>筛选器方法</p><ul><li><p>下一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体意思 ，看到方法名字 就知道了</span></span><br><span class="line">$(<span class="string">'#id'</span>).next()</span><br><span class="line">$(<span class="string">'#id'</span>).nextAll()</span><br><span class="line">$(<span class="string">'#id'</span>).nextUntil(<span class="string">'#i1'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>上一个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#id'</span>).prev()</span><br><span class="line">$(<span class="string">'#id'</span>).prevAll()</span><br><span class="line">$(<span class="string">'#id'</span>).prevUntil(<span class="string">'#i1'</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>父亲元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#id'</span>).parent()</span><br><span class="line">$(<span class="string">'#id'</span>).parents()</span><br><span class="line">$(<span class="string">'#id'</span>).parentsUntil(<span class="string">'#i1'</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>儿子&amp;兄弟元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#id"</span>).children();<span class="comment">// 儿子们</span></span><br><span class="line">$(<span class="string">"#id"</span>).siblings();<span class="comment">// 兄弟们</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>查找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).find(<span class="string">"p"</span>)  </span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">$(<span class="string">'div p'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//筛选</span></span><br><span class="line">$(<span class="string">'div'</span>).filter(<span class="string">'.c1'</span>)  <span class="comment">// 从结果集 中过滤 有c1 的样式</span></span><br><span class="line"></span><br><span class="line">.first() <span class="comment">// 获取匹配的第一个元素</span></span><br><span class="line">.last() <span class="comment">// 获取匹配的最后一个元素</span></span><br><span class="line">.not() <span class="comment">// 从匹配元素的集合中删除与指定表达式匹配的元素</span></span><br><span class="line">.has() <span class="comment">// 保留包含特定后代的元素，去掉那些不含有指定后代的元素。</span></span><br><span class="line">.eq() <span class="comment">// 索引值等于指定值的元素</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>链式操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 一行代码实现第一个p变红，第二个p变绿</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;p&gt;p1&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;p2&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$('div&gt;p').first().addclass('c1').next().addclass('c2');</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="jQuery-文档处理"><a href="#jQuery-文档处理" class="headerlink" title="jQuery 文档处理"></a>jQuery 文档处理</h4><p> 主要就是 HTML 标签的增删改查</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 标签内部 尾部 追加元素</span></span><br><span class="line">$(<span class="string">'#d1'</span>).append(pEle);</span><br><span class="line">$pEle.appendTo($(<span class="string">'#d1'</span>))</span><br><span class="line"><span class="comment">//2. 标签内部 头部 增加元素</span></span><br><span class="line">$(<span class="string">'#d1'</span>).prepend(pEle)</span><br><span class="line">$pEle.prependTo($(<span class="string">'#d1'</span>))</span><br><span class="line"><span class="comment">//3. 标签外部 下面 添加元素  </span></span><br><span class="line">$(A).after(B)          <span class="comment">// 把B放到A的后面</span></span><br><span class="line">$(A).insertBefore(B)    <span class="comment">// A 插到 B 前面</span></span><br><span class="line"><span class="comment">//4. 标签外部 上面 添加元素</span></span><br><span class="line">$(A).before(B)<span class="comment">// 把B放到A的前面</span></span><br><span class="line">$(A).insertBefore(B)<span class="comment">// A 插到 B前面</span></span><br><span class="line"><span class="comment">//5. 替换标签</span></span><br><span class="line">replaceWith() <span class="comment">// 什么被什么 替换</span></span><br><span class="line">replaceAll()<span class="comment">// 拿什么替换什么</span></span><br></pre></td></tr></table></figure><h4 id="jQuery-操作css"><a href="#jQuery-操作css" class="headerlink" title="jQuery 操作css"></a>jQuery 操作css</h4><ul><li><p>基本操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取属性值(font-size 不需要驼峰，跟js 不一样)</span></span><br><span class="line">$(<span class="string">'#p1'</span>).css(<span class="string">'font-size'</span>)</span><br><span class="line"><span class="comment">//2.设置 某个属性值  注意是 ， 不是：</span></span><br><span class="line">$(<span class="string">'#p1'</span>).css(<span class="string">'font-size'</span>,<span class="string">'24px'</span>);</span><br><span class="line"><span class="comment">// 3. 设置多个属性值</span></span><br><span class="line">$(<span class="string">'#p1'</span>).css(&#123;<span class="string">"border"</span>:<span class="string">"1px solid black"</span>,“color”：“blue”&#125;)；</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>位置操作 （postion：relative fixed abluate，相当于修改 其 offset的值）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取位置偏移参数 （注意：获取的值 与 设置的值 是保持一致的）</span></span><br><span class="line">$(<span class="string">'.c'</span>).offset()</span><br><span class="line"><span class="comment">//2.设置参数 注意此处不是字符串，而是 直接 key 不需要加 引号，值时 Number形式 </span></span><br><span class="line">$(<span class="string">'.c'</span>).offset(top:<span class="number">284</span>,<span class="attr">left</span>:<span class="number">100</span>)</span><br><span class="line"><span class="comment">// 3. postion 的值 只能获取，设置不起作用</span></span><br><span class="line"><span class="comment">// scrollTop 获取当前滚动条偏移量</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollTop()</span><br><span class="line"><span class="comment">// 设置滚动条到 指定位置（通常都是 到达 顶部）</span></span><br><span class="line">$(windowm).scrollTop(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="jQuery-事件绑定"><a href="#jQuery-事件绑定" class="headerlink" title="jQuery 事件绑定"></a>jQuery 事件绑定</h4><ul><li><p>绑定的几种方法形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//方法一</span><br><span class="line">$(&apos;p&apos;).hover(function()&#123;</span><br><span class="line">console.log(&apos;鼠标移上来了 。。。&apos;);</span><br><span class="line">&#125;,function()&#123;</span><br><span class="line">console.log(&apos;鼠标移走了 。。。&apos;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//方法二  input  focus blur 事件</span><br><span class="line"></span><br><span class="line">$(&apos;#i1&apos;).on(&apos;input&apos;,function()&#123;</span><br><span class="line">console.log($(this).val())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>事件冒泡</p><p>当子标签 与 父标签都有 点击事件，那么点击 子标签，那么 子标签与 父标签 都会相应click 事件，这就是冒泡</p><p>如何解除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;span&apos;).click(function(e)&#123;</span><br><span class="line">  alert(&apos;span click ...&apos;)</span><br><span class="line">  e.stopPropagation(); //阻止冒泡</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>事件委托</p><p>TODO js 中事件委托 详细的讲解看这里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    $('body').on('click','button',function () &#123;</span></span><br><span class="line"><span class="regexp">        alert(123)</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="jQuery-扩展方法"><a href="#jQuery-扩展方法" class="headerlink" title="jQuery 扩展方法"></a>jQuery 扩展方法</h4><ul><li><p>each()  遍历方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.each(array,<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">    consoloe.log(array[index])</span><br><span class="line">&#125;)</span><br><span class="line">$divEles.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    <span class="comment">// function 前面那个 可以省略</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 打印每个标签对象 </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>data()  设置 自定义属性的值</p><p><strong>注意：通过此方法设置的属性 用户不可见，通过页面中的源代码也看不到</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(div).data(<span class="string">'k'</span>);   <span class="comment">// 获取 标签的 k 属性的值</span></span><br><span class="line">$(<span class="string">'div'</span>).data(<span class="string">"k"</span>,<span class="number">100</span>);<span class="comment">// 设置 标签的 k 属性的值</span></span><br><span class="line">$(<span class="string">'div'</span>).removeData(<span class="string">'k'</span>);<span class="comment">// 移除元素的 k 属性</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="jQuery-自带动画"><a href="#jQuery-自带动画" class="headerlink" title="jQuery 自带动画"></a>jQuery 自带动画</h4><p>简单的动画过度，渐入渐出等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'img'</span>).hide(<span class="number">5000</span>)</span><br><span class="line">$(<span class="string">'img'</span>).show(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'img'</span>).slideUp(<span class="number">3000</span>)</span><br><span class="line">$(<span class="string">'img'</span>).slideDown(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'img'</span>).fadeIn(<span class="number">3000</span>)</span><br><span class="line">$(<span class="string">'img'</span>).fadeOut(<span class="number">3000</span>)</span><br><span class="line">$(<span class="string">'img'</span>).fadeTo(<span class="number">3000</span>,<span class="number">0.4</span>) <span class="comment">// 0.4 为透明度</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要简单介绍 前端框架 jQuery ，当然也是 基础的部分&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端BOM与DOM</title>
    <link href="https://fangtang0101.github.io/2019/08/01/%E5%89%8D%E7%AB%AFBOM%E4%B8%8EDOM/"/>
    <id>https://fangtang0101.github.io/2019/08/01/前端BOM与DOM/</id>
    <published>2019-08-01T03:24:41.000Z</published>
    <updated>2019-08-01T06:40:16.894Z</updated>
    
    <content type="html"><![CDATA[<p>前端css 简单介绍</p><p>关于DOM 与 BOM 的简单介绍</p><a id="more"></a><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><hr><h4 id="DOM的简单介绍"><a href="#DOM的简单介绍" class="headerlink" title="DOM的简单介绍"></a>DOM的简单介绍</h4><ul><li>定义：document Object model （文档对象模型） 理解为 HTML 对应的 对象，html在js 中的体现形式，这样js 才可以操作它</li></ul><h4 id="获取标签对象的三种方法"><a href="#获取标签对象的三种方法" class="headerlink" title="获取标签对象的三种方法"></a>获取标签对象的三种方法</h4><ul><li><p><code>document.getElementById(&#39;#name&#39;)</code>   </p><p>获取 id 为 name 的标签 （一般id 只能有一个，即时有两个，那么也获取到一个）</p></li><li><p><code>document.getElementsByClass(&#39;.name&#39;)</code></p><p>获取 class 为 name 的 div （返回一个数组）</p></li><li><p><code>document.getElementsByTagName(&#39;div&#39;)</code></p><p>货物 标签为 div 的所有标签 （返回一个数组）</p></li></ul><h4 id="如何操作标签对象的内容与属性"><a href="#如何操作标签对象的内容与属性" class="headerlink" title="如何操作标签对象的内容与属性"></a>如何操作标签对象的内容与属性</h4><ul><li><p>获取标签的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">'c1'</span>);</span><br><span class="line">obj.innerText   <span class="comment">// 获取内容,此内容不包含 标签   xxxx</span></span><br><span class="line">obj.innerHTML   <span class="comment">// 获取内容,此内容包含 标签   &lt;a href='#'&gt;xxxx&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line">obj.innerText = <span class="string">'新设置的内容'</span>; <span class="comment">//设置内容 </span></span><br><span class="line">obj.innerHTML = <span class="string">"&lt;a href='#'&gt;设置的内容&lt;/a&gt;"</span>; <span class="comment">//设置内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取与设置 input系列标签中 value 值</span></span><br><span class="line">obj.value</span><br><span class="line">obj.value = <span class="number">123</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>获取标签的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">'c1'</span>);</span><br><span class="line"></span><br><span class="line">obj.getAttribute(<span class="string">'id'</span>)  <span class="comment">// 获取属性</span></span><br><span class="line">obj3.setAttribute(<span class="string">'k2'</span>, <span class="string">'v2'</span>); <span class="comment">//设置属性</span></span><br><span class="line">obj3.removeAttribute(<span class="string">'k1'</span>)<span class="comment">// 删除属性</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="如何设置css-样式"><a href="#如何设置css-样式" class="headerlink" title="如何设置css 样式"></a>如何设置css 样式</h4><ul><li><p>大颗粒度设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d1.classList           <span class="comment">// 获取d1 标签的所有 class 的类 返回数组</span></span><br><span class="line">d1.classList.add(<span class="string">'c1'</span>) <span class="comment">// d1 添加 c1 的样式</span></span><br><span class="line">d1.classList.remove(<span class="string">'c1'</span>) <span class="comment">// d1 去除 c1 的样式</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>细颗粒度设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj.style.color = <span class="string">'red'</span> </span><br><span class="line">obj.style.fontSize = <span class="string">'20px'</span>  <span class="comment">// font-size: 20px; 对应</span></span><br><span class="line"><span class="comment">// 1. 值 全部是 字符串形式</span></span><br><span class="line"><span class="comment">// 2. 当属性 有 - ，那么转换成 驼峰式</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><ul><li><p>常见事件  <strong>注意：事件的名字 不要驼峰</strong></p><ol><li>onclick                  点击事件</li><li>onmouseover      鼠标放上去，触发事件</li><li>onmouseout      鼠标移开  触发函数</li><li>onfouces           获取焦点（input）</li><li>onblur                失去焦点</li></ol></li><li><p>事件如何绑定方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line">&lt;input type=<span class="string">"text"</span> onclik=<span class="string">"f1();"</span> &gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">&lt;input type=<span class="string">"text"</span>  id=<span class="string">'i1'</span>&gt;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">'i1'</span>)；</span><br><span class="line">obj.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="window-常见方法"><a href="#window-常见方法" class="headerlink" title="window 常见方法"></a>window 常见方法</h4><ul><li><code>alert(123)</code> // 弹框显示123  会阻塞线程</li><li><code>let res = confirm(&#39;确定删除吗？&#39;)</code> // 确认框，返回 true false  会阻塞线程</li><li><code>open(&#39;www.baidu.com&#39;)</code>  //  打开新窗口</li><li><code>location.href=&#39;www.baidu.com&#39;</code>  //  当前窗口跳转</li><li><code>location.reload()</code>    //   刷新当前页面</li></ul><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><hr><p><strong>BOM（浏览器对象模型）是浏览器本身的一些信息的设置和获取</strong>    比如获取浏览器高度，宽度，跳转地址等</p><ul><li><p>navigator  获取浏览器特征</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ua = navigator.user.Agent</span><br><span class="line"><span class="keyword">let</span> isChorm = ua.indexOf(<span class="string">'chrom'</span>)  <span class="comment">// 判断是否是 chorm</span></span><br><span class="line"><span class="comment">// 通常用于判断 手机 的 浏览器等等</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>screen  获取屏幕信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(screen.width)</span><br><span class="line"><span class="built_in">console</span>.log(screen.height)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>location 窗口URl 地址相关操作，获取网址 协议 path 参数 hash 等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如当前网址是 https://juejin.im/timeline/frontend?a=10&amp;b=10#some</span></span><br><span class="line"><span class="built_in">console</span>.log(location.href)  <span class="comment">// https://juejin.im/timeline/frontend?a=10&amp;b=10#some</span></span><br><span class="line"><span class="built_in">console</span>.log(location.protocol) <span class="comment">// https:</span></span><br><span class="line"><span class="built_in">console</span>.log(location.pathname) <span class="comment">// /timeline/frontend</span></span><br><span class="line"><span class="built_in">console</span>.log(location.search) <span class="comment">// ?a=10&amp;b=10</span></span><br><span class="line"><span class="built_in">console</span>.log(location.hash) <span class="comment">// #some</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>history 浏览器 前进与后退等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">history.back()</span><br><span class="line">history.forward()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端css 简单介绍&lt;/p&gt;
&lt;p&gt;关于DOM 与 BOM 的简单介绍&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端-js基础</title>
    <link href="https://fangtang0101.github.io/2019/07/31/%E5%89%8D%E7%AB%AF-js%E5%9F%BA%E7%A1%80/"/>
    <id>https://fangtang0101.github.io/2019/07/31/前端-js基础/</id>
    <published>2019-07-31T06:45:47.000Z</published>
    <updated>2019-08-02T09:45:33.310Z</updated>
    
    <content type="html"><![CDATA[<p>本文是对js基本知识的介绍</p><a id="more"></a><h3 id="1-js环境介绍"><a href="#1-js环境介绍" class="headerlink" title="1. js环境介绍"></a>1. js环境介绍</h3><ul><li><p>js  简介</p><ul><li><p>js 是前端的一门语言，可以操作 HTML 与 css</p></li><li><p>js 是一门 弱类型语言，没有 太多的强制性的 限制，语言比较松散</p></li><li><p>js 的 变种很多，node.js  typestript 等，也有许多框架 jQuery Vue React 等，非常丰富，应用的领域也非常广泛，理论上来说 前后端都可以 通吃 </p><p>TODO：以后专门详细介绍 总结 各种框架 与 变种的对比 与差异</p></li></ul></li></ul><ul><li><p>运行环境 &amp; 编辑器</p><ul><li><p>一般运行在 浏览器上，node.js 运行在 V8 引擎上，作为后端语言</p></li><li><p>一般 常用的编辑器有 sublime  vscode 等，其实 随便一个 文本编辑器  都可以</p></li><li><p>一般调试都用 chorm 的 控制台，里面异常强大，也可以直接 运行代码，就像 python 在命令行执行</p><p>TODO：关于 chorm 的控制台使用，看这篇文章</p></li></ul></li></ul><ul><li><p>放置的位置</p><ul><li><code>&lt;script&gt;....js的代码&lt;/script&gt;</code> 通过这种方式 直接在 写在html 中 <ul><li>强烈不建议这么使用</li><li>若要使用，写在 body 之后 </li><li><code>&lt;script src=&quot;js的资源路径&quot;&gt;&lt;/script&gt;</code> 代码写在 单独文件里，直接引用地址</li></ul></li></ul></li></ul><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h3><ul><li><p>变量申明</p><ul><li><code>var name =  &#39;fang&#39;</code></li><li><code>let name = &#39;fang&#39;</code></li><li>命名规则  _ 数字 字母 $ 组成，<strong>不能以数字开头</strong></li><li>TODO var let const 的区别，看这里</li></ul></li><li><p>变量类型</p><ul><li><p>字符串</p><p><strong>常用方法一览：</strong></p><ul><li><p>str.length     长度</p></li><li><p>str.trim()     去除左右空格  </p></li><li><p>str.trimLeft() 去除左边空格</p></li><li><p>str.trimRight() 去除右边空格</p></li><li><p>str.charAt(n)   返回第 索引为 n 的字符</p></li><li><p>str.concat(val,….)  拼接字符串</p></li><li><p>str.indexOf(subString)  返回 subString 在 str 中出现的位置 ,没有就是 -1</p></li><li><p>str.substring(from,to)  根据索引获取 子字符串</p></li><li><p>str.slice(start,end)    切片</p></li><li><p>str.toLowerCase()        转小写    </p></li><li><p>str.toUpperCase()        转大写</p></li><li><p>str.split(s,limit)    用 s 分割 str,返回数组  </p><p><strong>如何创建</strong></p><pre><code>  var name = &apos;fang&apos;   var name = `fang xxxxx`;   注意两者形式不一样  ‘’ 或则 ``;  TODO  两者的区别</code></pre></li></ul></li></ul></li></ul><ul><li><p>数字</p><ul><li>int 整形 </li><li>float 浮点型</li></ul></li><li><p>布尔</p><p>true  false <strong>注意全是小写</strong></p></li><li><p>数组</p><ul><li><p>创建  <code>var arr = [1,3,&#39;123&#39;]</code></p></li><li><p>常用方法一览</p><ul><li>arr.length    长度</li><li>arr.push()     从尾部增加一个元素</li><li>arr.pop()    从尾部获取一个元素</li><li>arr.unshift() 从头部插入一个元素</li><li>arr.shift()  从头部 移除一个数组</li><li>arr.slice()  切片</li><li>arr.reverse() 反转</li><li>arr.join(‘,’) 将数组元素 用 某个 字符串（此处为 ，） 链接成一个 字符串</li><li>arr.concart(val) 合并数组</li><li>arr.sort()  排序</li></ul></li><li><p>遍历 </p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(index in arr)&#123;</span><br><span class="line"> console.log(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>字典</p><ul><li><p>创建</p><p><code>var dic = {name:&#39;fang&#39;,age:18}</code></p></li><li><p>遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (key in dic)&#123;</span><br><span class="line"> console.log(dic[key])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>对象 （object）</li></ul><h3 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3. 运算符"></a>3. 运算符</h3><ul><li><p>算数运算符</p><p><code>+ - * / % a++ a--</code></p></li><li><p>比较运算符</p><p><code>&gt; &gt;= &lt; &lt;= != !== == ===</code> </p><p><strong>== 与 === 的区别</strong></p><ul><li><p>== 当对比的对象为 基本类型的时候，会先将 他们转换为 相同的 数据类型 再比对，若 一个是 基本数据类型 另一个是 引用类型，那么 不转换</p></li><li><p>=== 先看类型是否相同，然后再比较 值是否相等，若都是 引用类型，那么是对比的内存地址是否相等，而不是 值相等</p></li><li><p>eg TODO 详细理解请看这篇文章</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log( 2 == '2')  // true</span><br><span class="line">console.log( 2 === '2') // false</span><br><span class="line">console.log(&#123;name:'fang'&#125; == &#123;name:'fang'&#125;)  // true</span><br><span class="line">console.log(&#123;name:'fang'&#125; === &#123;name:'fang'&#125;) // false</span><br><span class="line">let a1 = &#123;name:'fang'&#125;;</span><br><span class="line">let a2 = a1;</span><br><span class="line">console.log(a1 === a2)   // true</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>赋值运算符</p><p><code>= += -= *= /=</code></p></li></ul><h3 id="4-流程控制"><a href="#4-流程控制" class="headerlink" title="4. 流程控制"></a>4. 流程控制</h3><ul><li><p>顺序控制 </p><p>代码自上而下运行 就是 顺序控制，90%的代码都是这样的，只是我们没有 特别注意到</p></li><li><p>分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">方式一：</span><br><span class="line">if(表达式判断)&#123;...&#125;elseif(表达式判断)&#123;...&#125;else&#123;...&#125;</span><br><span class="line">方式二：</span><br><span class="line">swith(表达式)&#123;</span><br><span class="line">case n: // n为表达式的值</span><br><span class="line">代码块</span><br><span class="line">break;</span><br><span class="line">case m: // m为表达式的值</span><br><span class="line">代码块</span><br><span class="line">break;</span><br><span class="line">     default:</span><br><span class="line">     默认代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> arr)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i,arr[i]);                      </span><br><span class="line">&#125;</span><br><span class="line">                               </span><br><span class="line"> <span class="comment">//字典</span></span><br><span class="line"><span class="keyword">var</span> dic = &#123;<span class="attr">name</span>:<span class="string">'fang'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> arr)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(key,arr[ke]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-函数"><a href="#5-函数" class="headerlink" title="5. 函数"></a>5. 函数</h3><ul><li><p>如何创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">参数</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建函数'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">test1() <span class="comment">// 调用</span></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="keyword">let</span> test2 =  <span class="function"><span class="keyword">function</span> (<span class="params">参数</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建函数'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line">test2()<span class="comment">// 调用</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>参数</p><ul><li>js 中函数的参数 只能 位置传参，不能关键字传参</li><li>参数可以设置默认值 （ES6 新功能）</li><li>在函数内部 通过 arguments（数组) 可实现 可变长参数的传递 </li></ul></li><li><p>回调函数</p><p><strong>就是将 函数 作为另一个函数的参数，然后在函数内部 特定的时候，再调用 参数函数</strong></p><ul><li><p>js 中 没有多线程，所以 回调函数是做为 实现异步 的一个方法</p></li><li><p>js 代码执行 的时候  是没有多线程的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// .... 网络请求 代码</span></span><br><span class="line">    cb(success);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params">success</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// .... 处理网络请求成功回来的代码，实现异步</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cb 只是个名字而已，没有强制规定名字，只是大家一般这么远叫而已</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>闭包</p><p><strong>能够 获取函数内部 数据（变量）的函数</strong></p><p><strong>其实是为了解决 作用域问题，因为函数执行完之后，内部变量就销毁，此时需要另外一个函数做引用内部变量，那么就不会被 回收</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//  ... 其他代码</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>TODO 关于函数的参数 ，回调函数，闭包 等 细节内容，请看这里</li></ul><h3 id="6-类"><a href="#6-类" class="headerlink" title="6. 类"></a>6. 类</h3><ul><li><p>js 中的 说明</p><ul><li>js 中类的概念 比较 薄弱，ES6 之前创建 一个类也非常的简单，ES6 创建类的方式 接近于其他强类型语言，也就是说大趋势是 js 慢慢规范了</li></ul></li><li><p>如何创建 与 使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6 之前：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dog</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'i can eat'</span>,<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hei = <span class="keyword">new</span> dog(<span class="string">'小黑'</span>)；</span><br><span class="line">hei.eat()</span><br><span class="line"><span class="comment">// 注意：当不用 new 的时候，dog 就是一个 普通函数，当用new 那么dog 就是一个构造函数，是不是很崩溃，所以 有了新的改革</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    eat()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'i can eat'</span>,<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TODO：关于 ES6 与之前的 类的区别，继承的实现等一些列问题，看这里</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是对js基本知识的介绍&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://fangtang0101.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>前端-css</title>
    <link href="https://fangtang0101.github.io/2019/07/30/%E5%89%8D%E7%AB%AF-css/"/>
    <id>https://fangtang0101.github.io/2019/07/30/前端-css/</id>
    <published>2019-07-30T05:39:35.000Z</published>
    <updated>2019-07-30T11:30:43.975Z</updated>
    
    <content type="html"><![CDATA[<p>前端css 简单介绍</p><p>css : 就是 html 标签的 衣服，化妆品，将网页打扮的更加漂亮</p><a id="more"></a><h3 id="1-css基本语法"><a href="#1-css基本语法" class="headerlink" title="1.  css基本语法"></a>1.  css基本语法</h3><p>​      创建一个css 样式 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div &#123;color：red；font-size:16px&#125;</span><br><span class="line">选择器 &#123;属性名：属性值 ....&#125;</span><br></pre></td></tr></table></figure><h3 id="2-css如何引入"><a href="#2-css如何引入" class="headerlink" title="2. css如何引入"></a>2. css如何引入</h3><ul><li><p>行内引入  <strong>直接在标签中写</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>Hello world.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>内部样式写入  <strong>放在网页的 <style></style> 中</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        p&#123;</span><br><span class="line">            background-color: #2b99ff;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>外部样式写入     <strong>单独文件，需要引入（实际开发中基本都是这样的）</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"mystyle.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-css-选择器"><a href="#3-css-选择器" class="headerlink" title="3.css 选择器"></a>3.css 选择器</h3><ul><li><p>基本选择器</p><ol><li><p>元素选择器</p><p><code>p {color: &quot;red&quot;;}</code></p></li><li><p>id 选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#i1 &#123;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="3"><li><p>类选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.c1 &#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">p.c1 &#123;     </span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">p.c1  指的是  找到 标签是 p 并且 class 为 c1 的元素</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>通用选择器</p><p><code>*{color: white;}</code></p></li></ol><ul><li><p>组合选择器</p><ol><li><p>后代选择器</p><p><strong>包括下面所有层级，包括儿子与孙子层级</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*li内部的a标签设置字体颜色  注意：内部所有 a 标签*/</span><br><span class="line">li a &#123;</span><br><span class="line">  color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li><p>儿子选择器</p><p><strong>当前标签下一层 算儿子层级</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*选择所有父级是 <span class="tag">&lt;<span class="name">div</span>&gt;</span> 元素的 <span class="tag">&lt;<span class="name">p</span>&gt;</span> 元素 注意：内部第一层的所有 p （p里面的p就不算）*/</span><br><span class="line">div&gt;p&#123;</span><br><span class="line">  color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>毗邻选择器</p><p> <strong>注意：仅靠着的div 下面第一个 p 元素（如果div 下面的不是 p标签，那么不生效）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*选择所有紧接着&lt;div&gt;元素之后的&lt;p&gt;元素 */</span><br><span class="line">div+p &#123;</span><br><span class="line">  margin: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>弟弟选择器 </p><p><strong>注意：div下方的 所有p 标签，上方的标签 没有作用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*i1后面所有的兄弟p标签*/</span><br><span class="line">#i1~p &#123;</span><br><span class="line">  border: 2px solid royalblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>属性选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p[title]  /*用于选取带有指定属性的元素。*/</span><br><span class="line">p[title=&quot;213&quot;] /*用于选取带有指定属性和值的元素。*/</span><br><span class="line">[title^=&quot;hello&quot;] /*找到所有title属性以hello开头的元素*/</span><br><span class="line">[title$=&quot;hello&quot;] /*找到所有title属性以hello结尾的元素*/</span><br><span class="line">[title*=&quot;hello&quot;] /*找到所有title属性中包含（字符串包含）hello的元素*/</span><br><span class="line">[title~=&quot;hello&quot;] /*找到所有title属性(有多个值或值以空格分割)中有一个值为hello的元素：*/</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>分组与嵌套 </p><ol><li><p>分组  <strong>一个样式 作用于 多个标签</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div, p &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li><p>嵌套  <strong>获取某个标签 内部 的某个标签</strong></p><p>class 为c1 的内部的 p 标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.c1 p &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>伪类选择器    <strong>某个标签特定状态下的选择器</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:link   未访问的链接</span><br><span class="line">a:hover  鼠标移动到链接上</span><br><span class="line">a:active 选定的链接</span><br><span class="line">a:visited 已访问的链接</span><br><span class="line">input:focus input输入框获取焦点时样式</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>伪元素选择器</p><ol><li><p>first-letter   常用 首字母 特殊处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p:first-letter &#123;</span><br><span class="line">  font-size: 48px;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li><p>before    在当前标签<strong>之前</strong>固定插入内容并可以设置样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*在每个&lt;p&gt;元素之前插入内容*/</span><br><span class="line">p:before &#123;</span><br><span class="line">  content:&quot;*&quot;;</span><br><span class="line">  color:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>after   在当前标签<strong>之后</strong>固定插入内容并可以设置样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*在每个&lt;p&gt;元素之后插入内容*/</span><br><span class="line">p:after &#123;</span><br><span class="line">  content:&quot;[?]&quot;;</span><br><span class="line">  color:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>before和after多用于清除浮动</p><p>before和after 用处很多，比较典型的是 在 某个元素标签之前加固定图标</p></li></ol><ul><li><p>选择器的优先级</p><p>如果一个 两个相互冲突的样式 作用于 同一个 标签上，那么最终由优先级比较高的那个 最为最后起作用的</p><ul><li><p>内联样式  权重 1000</p></li><li><p>id 选择器 权重 100</p></li><li><p>类选择器 权重 10</p></li><li><p>元素选择器 权重 1</p></li><li><p>important 权重最高</p></li></ul></li></ul><h3 id="4-css-属性介绍"><a href="#4-css-属性介绍" class="headerlink" title="4.css 属性介绍"></a>4.css 属性介绍</h3><ul><li><p>width &amp; height</p><p>也就是 元素的宽高 </p><p><strong>块级元素</strong>才可以设置，<strong>行内元素</strong> 不能设置</p><p>当 box-sizing：content-box  width 不包含内边距和border  （默认）</p><p>当 box-sizing：border-box  width 包含内边距和border  （使用更方便）</p><p>具体的原因和设置，在以后的文章里面 再介绍</p></li><li><p>字体属性</p><ol><li><p>文字字体  <strong>从左到右，电脑里面有就优先使用哪个</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  font-family: &quot;Microsoft Yahei&quot;, &quot;微软雅黑&quot;, &quot;Arial&quot;, sans-serif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li><p>字体大小</p><p><code>font-size: 14px;</code></p><p><strong>延伸</strong>：有一种适配方案就是根据 调整 root-font-size 来做适配方案，后面具体介绍</p></li><li><p>字重  <strong>也就是粗细</strong></p><ul><li>nomal  默认粗细  400</li><li>bold    粗体  700</li><li>bolder  更粗</li><li>lighter  更细</li><li>100-900  设置具体粗细</li><li>inherit  继承父元素字体的粗细值</li></ul></li><li><p>文本颜色</p><ul><li>十六进制  #ffffff</li><li>RGB值   RGB(255,0,0)</li><li>颜色名称  red</li><li>rgba    rgba(255,0,0,0.3)  o.3 为透明度</li></ul></li></ol><ul><li><p>文字</p><ol><li><p>文字对齐</p><p>text-align 属性</p><table><thead><tr><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>left</td><td>默认 左对齐</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr><tr><td>justify</td><td>两端对齐</td></tr></tbody></table></li></ol></li></ul><ol start="2"><li><p>文字装饰</p><p>text-decoration  一般是下划线 之类的</p><table><thead><tr><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>none</td><td>默认  啥也没有</td></tr><tr><td>underline</td><td>下划线</td></tr><tr><td>overline</td><td>上划线</td></tr><tr><td>line-through</td><td>穿越线</td></tr><tr><td>inherit</td><td>继承父元素的 text-decoration 属性</td></tr></tbody></table></li><li><p>首行缩进</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  text-indent: 32px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>背景属性  <strong>用的比较多</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*背景颜色*/</span><br><span class="line">background-color: red;</span><br><span class="line">/*背景图片*/</span><br><span class="line">background-image: url('1.jpg');</span><br><span class="line">/*</span><br><span class="line"> 背景重复</span><br><span class="line"> repeat(默认):背景图片平铺排满整个网页</span><br><span class="line"> repeat-x：背景图片只在水平方向上平铺</span><br><span class="line"> repeat-y：背景图片只在垂直方向上平铺</span><br><span class="line"> no-repeat：背景图片不平铺</span><br><span class="line">*/</span><br><span class="line">background-repeat: no-repeat; </span><br><span class="line">/*背景位置*/</span><br><span class="line">background-position: left top;</span><br><span class="line">/*background-position: 200px 200px;*/</span><br></pre></td></tr></table></figure><p><strong>前端雪碧图就是运用background-position来实现，也是优化页面的方式之一</strong></p></li></ul><ul><li><p>边框</p><p>边框属性 <code>border-width</code> <code>border-style</code> <code>border-color</code>  边框的 宽度 线的样式 颜色</p><p><code>border-style</code> 有 </p><ul><li>none   无边框</li><li>dotted 点状虚线边框</li><li>dashed 矩形虚线边框</li><li>solid  实现边框</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#i1 &#123;</span><br><span class="line">  border-width: 2px;</span><br><span class="line">  border-style: solid;</span><br><span class="line">  border-color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般简写为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#i1 &#123;</span><br><span class="line">  border: 2px solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以单独设置一个边的 线条 <strong>用的比较多</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#i1 &#123;</span><br><span class="line">  border-top-style:dotted;</span><br><span class="line">  border-top-color: red;</span><br><span class="line">  border-right-style:solid;</span><br><span class="line">  border-bottom-style:dotted;</span><br><span class="line">  border-left-style:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>边框与圆角</p><p>一般用于设置 四周圆角与 圆形图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img &#123;</span><br><span class="line">  border-radius: 100px; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>display 属性</p><table><thead><tr><th align="center">值</th><th align="left">意义</th></tr></thead><tbody><tr><td align="center">none</td><td align="left">不显示</td></tr><tr><td align="center">block</td><td align="left">块级元素，独占一行</td></tr><tr><td align="center">inline</td><td align="left">内联元素，无法设置 width height 等一些列属性，宽度高度等都是内部元素的撑开</td></tr><tr><td align="center">inline-block</td><td align="left">内联元素具有设置 width height 等属性</td></tr></tbody></table></li></ul><ul><li><p>css 盒子模型</p><p>说明：盒子模型是一个概念，css 布局就像一个盒子  有 margin border padding （现实中的盒子是不是也是有这样的特征呢）</p></li></ul><ul><li><p>margin 外边距</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.margin-test &#123;</span><br><span class="line">  margin-top:5px;</span><br><span class="line">  margin-right:10px;</span><br><span class="line">  margin-bottom:15px;</span><br><span class="line">  margin-left:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>margin: 5px 10px 15px 20px;   简写</li><li>*<em>margin: 0 auto; *</em>            居中（常用）</li></ul></li></ul><ul><li><p>padding 内填充</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.padding-test &#123;</span><br><span class="line">  padding-top: 5px;</span><br><span class="line">  padding-right: 10px;</span><br><span class="line">  padding-bottom: 15px;</span><br><span class="line">  padding-left: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>padding: 5px 10px 15px 20px;  简写 上右下左</li></ul></li></ul><ul><li><p>浮动 float</p><p>浮动在css 中是一个很重要的 布局概念，即脱硫了 正常的流式布局，可以 我们认为的控制它的布局</p><p>后面会单独介绍</p><ul><li><p>left  左浮动</p></li><li><p>right 有浮动</p></li><li><p>none 默认值  不浮动</p></li></ul></li></ul><ul><li><p>clear 清除</p><p>clear 用于 清除浮动 ，配合在 float 之后用的</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>清除左侧浮动元素</td></tr><tr><td>right</td><td>清除右侧浮动元素</td></tr><tr><td>both</td><td>清除两侧浮动元素</td></tr><tr><td>none</td><td>偶人值 允许浮动</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 clear 属性的值</td></tr></tbody></table><p>如何清除浮动 （有浮动会造成 父元素塌陷，样式很丑）</p><ul><li><p>固定高度</p></li><li><p>*<em>伪元素清除 *</em>（一般都是这种多）</p></li><li><p>overflow：hidden</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:after &#123;</span><br><span class="line">  content: "";</span><br><span class="line">  display: block;</span><br><span class="line">  clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>溢出 overflow</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>默认值。若有益处，不会被裁剪</td></tr><tr><td>hidden</td><td>多余内容被裁剪，不可见</td></tr><tr><td>scroll</td><td>内容被裁剪 ，会以滚动条形式 检查其他内容</td></tr><tr><td>auto</td><td>若内容溢出，浏览器会自动以滚动条形式显示</td></tr><tr><td>inherit</td><td>继承父级元素的 此属性</td></tr></tbody></table><ul><li><p>overflow （水平和垂直方向都有设置）</p></li><li><p>overflow-x （仅水平方向）</p></li><li><p>overflow-y （设置垂直方向）</p></li></ul></li></ul><ul><li><p>定位 postion <strong>非常重要</strong></p><ul><li><p>static 默认值，无定位</p></li><li><p>relative 相对定位  <strong>不脱离文档流</strong></p><p>相对与 自身 定位 top right bottom left 相对与自身原来的位置 偏移的量</p></li><li><p>absoult 绝对定位  <strong>脱离文档流</strong></p><p>相对与 父级 的非 static 的 元素 来定位 偏移，如果 父级 是 static，那么逐层向上找，直到 body</p></li><li><p>fixed 固定   <strong>脱离文档流</strong></p><p>这个相对与浏览器窗口来定位，脱离了文档流</p></li></ul></li><li><p>z-index  z轴时间</p><ul><li>z 轴 上的值，值越高，那么越在上面，离用户越近</li><li>同一个位置，z 值越大，可以 覆盖这 z 值小的</li><li>float 布局的不存在 这个 z 的一说</li><li>如果 该元素的父级 不可见，那么 该元素 z 再大，也看不到</li></ul></li><li><p>透明度  opacity</p><p>透明度 0-1， 0 完全透明  1 完全不透明</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端css 简单介绍&lt;/p&gt;
&lt;p&gt;css : 就是 html 标签的 衣服，化妆品，将网页打扮的更加漂亮&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端-html</title>
    <link href="https://fangtang0101.github.io/2019/07/30/%E5%89%8D%E7%AB%AF-html/"/>
    <id>https://fangtang0101.github.io/2019/07/30/前端-html/</id>
    <published>2019-07-30T03:09:30.000Z</published>
    <updated>2019-07-30T03:23:36.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><hr><p>本文是对html 基本知识的介绍</p><a id="more"></a><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><h4 id="1-web-服务到底是什么"><a href="#1-web-服务到底是什么" class="headerlink" title="1. web 服务到底是什么"></a>1. web 服务到底是什么</h4><ol><li>web 服务，也就是 从浏览器 输入 url 地址</li><li>浏览器解析 url 地址，找到最近的 DNS 找到 对应的 ip地址</li><li>根据 ip 地址，找到 对应的服务器</li><li>服务器 给出对应的 内容 返回给 浏览器（返回的内容 就是一串 特殊的字符 — 就是 HTML）</li><li>浏览器 拿到 Html 内容 解析 （包括  html 标签 css js）</li><li>根据 一定的规则 渲染到 页面上</li></ol><h4 id="2-html是什么"><a href="#2-html是什么" class="headerlink" title="2. html是什么"></a>2. html是什么</h4><ul><li><p>html（超文本标记语言） 说白了就是 浏览器 能识别的 网页语言</p></li><li><p>脱硫浏览器，啥也不是</p></li><li><p>不同浏览器 解析的规则有一定的差异（其中，最著名的就是 IE，万恶之源）</p></li><li><p>以 <code>.html</code> 和  <code>.htm</code> 结尾</p></li></ul><h4 id="3-html-文档结构"><a href="#3-html-文档结构" class="headerlink" title="3. html 文档结构"></a>3. html 文档结构</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;!DOCTYPE html&gt;</code> 代表 用 htnl5 的标准来解析（默认），当然也可以选择 用 htnl4 等更低版本的版本来解析</p></li><li><p><code>html</code> 在最外层 包含 <code>header</code> 和<code>body</code></p></li></ul><h4 id="4-html-标签的格式"><a href="#4-html-标签的格式" class="headerlink" title="4. html 标签的格式"></a>4. html 标签的格式</h4><ul><li><code>&lt;标签名&gt;&lt;/标签名&gt;</code> 一般以 这样的格式出现 （<code>&lt;标签名/&gt;</code> 也有这样的）</li><li>可以加 属性   key=value 的形式  <code>&lt;div id=&#39;abc&#39;&gt;&lt;/div&gt;</code></li><li>插入style   <code>&lt;div style=&#39;color = &quot;red&quot;&#39;&gt;&lt;/div&gt;</code></li></ul><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><h4 id="1-html-配置说明-以及-header-标签"><a href="#1-html-配置说明-以及-header-标签" class="headerlink" title="1. html 配置说明 以及 header 标签"></a>1. html 配置说明 以及 header 标签</h4><ul><li><p><code>&lt;html&gt;</code>   最外层标签  （!DOCTYPE 代表 用html5 的标准解析）</p></li><li><p><code>&lt;style&gt;&lt;/style&gt;</code> 用于包裹或则引入 css 样式</p></li><li><p><code>&lt;script&gt;&lt;/script&gt;</code> 用于 包裹 或则引入 js 代码</p></li><li><p><code>&lt;link/&gt;</code> 引入外部文件（包括图片）</p></li><li><p><code>&lt;header&gt;</code> 里面包含其他标签，主要用来说明 网站信息</p><ul><li><p><code>&lt;title&gt;</code>网页标题</p></li><li><p><code>&lt;meta&gt;</code> 元信息，里面包含很多其他的配置 </p><ul><li><p>说明：</p><ol><li>主要是 描述 此页面 的介绍信息，有利于 SEO</li><li>信息 不展示给用户</li></ol></li><li><p>具体标签：</p><ol><li><p>属性 <code>.http-equiv</code>   告诉浏览器 解析 文档时候的参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定文档的编码类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-Type"</span> <span class="attr">charset</span>=<span class="string">UTF8</span>"&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--2秒后跳转到对应的网址，注意引号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"2;URL=https://www.baidu.com"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--告诉IE以最高级模式渲染文档--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>属性name, 相当于 网页的简介</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"meta总结,html meta,meta属性,meta跳转"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"meta总结"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul></li></ul><h4 id="2-常用标签"><a href="#2-常用标签" class="headerlink" title="2. 常用标签"></a>2. 常用标签</h4><ul><li><p>常用标签一览</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>容器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>容器<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">... 表格</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">输入框</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span>下拉框<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--换行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--水平线--&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>标签</th><th>代表什么</th></tr></thead><tbody><tr><td>div</td><td>容器</td></tr><tr><td>span</td><td>容器</td></tr><tr><td>ul li</td><td>列表</td></tr><tr><td>table</td><td>表格</td></tr><tr><td>input</td><td>输入框</td></tr><tr><td>select</td><td>下拉框</td></tr><tr><td>b</td><td>加粗</td></tr><tr><td>i</td><td>斜体</td></tr><tr><td>u</td><td>下划线</td></tr><tr><td>s</td><td>删除</td></tr><tr><td>p</td><td>段落</td></tr><tr><td>h1 ~ h6</td><td>标题1 ~标题6</td></tr><tr><td>br</td><td>换行</td></tr><tr><td>hr</td><td>水平线（华丽的分割线）</td></tr></tbody></table></li><li><p>特殊字符一览</p></li></ul><table><thead><tr><th>代码(最后加分号)</th><th>展示内容</th></tr></thead><tbody><tr><td>&amp;nbsp</td><td>空格</td></tr><tr><td>&amp;gt</td><td>&gt;</td></tr><tr><td>&amp;lt</td><td>&lt;</td></tr><tr><td>&amp;amp</td><td>&amp;</td></tr><tr><td>&amp;yen</td><td>¥</td></tr><tr><td>&amp;copy</td><td>版权 ©</td></tr><tr><td>&amp;reg</td><td>注册</td></tr></tbody></table><ul><li><p>div 与 span 标签</p><ol><li>div 与 span 都没有什么特殊的意义，就是一个 空白标签</li><li>div 与 span 很重要，是作为 容器用的，主要用于布局</li><li>div 是 块级标签，span 是行内标签。这在布局的时候有很大的区别</li><li>块级标签独占一行，有width height margin padding 等</li><li>行内元素 不独占一行，width height 都是通过 css 没有办法设置，就是自身内容的大小</li></ol></li><li><p>a 标签 - 超链接标签</p><p>就是点击可以直接跳转到一个 其他的地方，具体跳转到哪里，由你自己设置与规定（可以是一个 地址，文件，图片，邮箱）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> &gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">href: 链接地址</span><br><span class="line">1.绝对路径 www.baidu.com  跳到互联网中的一个 网址</span><br><span class="line">2. 相对路径 “about.html”   跳到本站点的一个 地址</span><br><span class="line">3. 锚点     “#top”   跳到页面中 top 的锚点处（id=‘top’）</span><br><span class="line">target： 规定如何跳转</span><br><span class="line">1._black 在新标签中打开目标网页</span><br><span class="line">2._self  表示在当前标签页中打开网页（本页面之前的网页没有了，换成 新的）</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>列表</p><ol><li><p>无序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">'disc'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>one<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>two<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>type的属性：</p><ul><li>disc - 实心圆（默认）</li><li>circle - 空心圆</li><li>square - 实体方块</li><li>none - 无样式    （实际开发中，统一会设置为 none）</li></ul></li><li><p>有序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"1"</span> <span class="attr">start</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>one<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>two<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">start="2"从 2 开始（不是从1 开始）</span><br></pre></td></tr></table></figure><p>type的属性：</p><ul><li>1 数字列表</li><li>A 大写字母</li><li>a 小写字母</li><li>I 大写罗马数字</li><li>i 小写罗马数字</li></ul></li><li><p>标题列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li><p>表格</p><p>理解成为 我们的 excel 就可以了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性一览</p><ol><li><p>boder    表格边框</p></li><li><p>cellpadding   内表框</p></li><li><p>cellspacing   外边框</p></li><li><p>width   宽度</p></li><li><p>rowspan  单元格竖跨多少行 （合并单元格）</p></li><li><p>colspan  单元格横跨多少列    （合并单元格）</p></li></ol></li></ul><ul><li><p>input</p><p>input 变种很多，通过 type 设置即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span><span class="attr">name</span>=<span class="string">'name'</span>&gt;</span></span><br></pre></td></tr></table></figure><p>属性一览表</p><table><thead><tr><th>type属性值</th><th>表现形式</th><th>对应代码</th></tr></thead><tbody><tr><td>text</td><td>单行输入</td><td><code>&lt;input type=&quot;text&quot; /&gt;</code></td></tr><tr><td>password</td><td>密码输入</td><td><code>&lt;input type=&quot;password&quot; /&gt;</code></td></tr><tr><td>date</td><td>时间控件</td><td><code>&lt;input type=&quot;date&quot; /&gt;</code></td></tr><tr><td>checkbox</td><td>复选框</td><td><code>&lt;input type=&quot;password&quot; checked=&quot;checked&quot; /&gt;</code></td></tr><tr><td>radio</td><td>单选框</td><td><code>&lt;input type=&quot;radio&quot; /&gt;</code></td></tr><tr><td>file</td><td>文件选择</td><td><code>&lt;input type=&quot;file&quot; /&gt;</code></td></tr><tr><td>submit</td><td>提交按钮</td><td><code>&lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;</code></td></tr><tr><td>reset</td><td>重置按钮</td><td><code>&lt;input type=&quot;submit&quot; value=&quot;重置&quot; /&gt;</code></td></tr><tr><td>button</td><td>普通输入框</td><td><code>&lt;input type=&quot;submit&quot; value=&quot;普通&quot; /&gt;</code></td></tr><tr><td>hidden</td><td>隐藏输入框</td><td><code>&lt;input type=&quot;hidden&quot; value=&quot;看不到&quot;&gt;</code></td></tr></tbody></table><p>属性说明：</p><ol><li>name   input 的名字，form提交的时候 key的名字</li><li>value：<ul><li>type = button reset submit hiddne  按钮显示的字</li><li>type = text password  输入框的 值</li><li>type = checkbox radio file </li></ul></li><li>checked  ： radio 与 checkbox  当前选项是否 被选中</li><li>readonly ： text password  不可编辑</li><li>disabled ： 全部禁用</li></ol></li><li><p>select   下拉选择框</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">"selected"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>  属性说明：</p><table><thead><tr><th>属性值</th><th>含义</th></tr></thead><tbody><tr><td>disabled</td><td>当前 选项 禁用</td></tr><tr><td>selected</td><td>当前 选项  选中</td></tr><tr><td>value</td><td>当前 option 选项 选中传递的 值</td></tr></tbody></table><ul><li><p>textarea 多行文本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"memo"</span> <span class="attr">id</span>=<span class="string">"memo"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">  默认内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  属性说明：</p><table><thead><tr><th>属性值</th><th>含义</th></tr></thead><tbody><tr><td>name</td><td>名称</td></tr><tr><td>rows</td><td>行数</td></tr><tr><td>cols</td><td>列数</td></tr><tr><td>disabled</td><td>禁用</td></tr></tbody></table></li></ul><ul><li><p>form 表单</p><p>是一个抽象的 标签，里面是 其他 标签的集合，主要用于与 后端交互</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  属性说明：</p><table><thead><tr><th>属性值</th><th>含义accept</th></tr></thead><tbody><tr><td>accept-charset</td><td>提交表单时使用的字符集（默认：页面字符集）</td></tr><tr><td>action</td><td>提交的地址 url</td></tr><tr><td>autocomplete</td><td>浏览器是否自动完成表单（默认：开启）</td></tr><tr><td>enctype</td><td>提交数据的编码 （默认： url-encoded）</td></tr><tr><td>method</td><td>HTTP 方法（默认：get）</td></tr><tr><td>name</td><td>表单的名字（document.forms.name）</td></tr><tr><td>novalidate</td><td>浏览器是否校验表单</td></tr><tr><td>target</td><td>action 中 地址 url  链接方式 （默认：_self）</td></tr></tbody></table></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;本文是对html 基本知识的介绍&lt;/p&gt;
    
    </summary>
    
    
      <category term="web 前端 html" scheme="https://fangtang0101.github.io/tags/web-%E5%89%8D%E7%AB%AF-html/"/>
    
  </entry>
  
  <entry>
    <title>webpack-basics</title>
    <link href="https://fangtang0101.github.io/2019/07/25/webpack-basics/"/>
    <id>https://fangtang0101.github.io/2019/07/25/webpack-basics/</id>
    <published>2019-07-25T09:29:14.000Z</published>
    <updated>2019-07-29T06:03:39.842Z</updated>
    
    <content type="html"><![CDATA[<h3 id="useage"><a href="#useage" class="headerlink" title="useage"></a>useage</h3><blockquote><p>这篇文档是 按照webpack官网 步骤 学习webpack 知识，有代码，有相应的说明，有总结 也有对官网代码实现过程不一致的地方的记录，欢迎一起交流学习</p></blockquote><a id="more"></a><ol><li><p>webpack-demo-1  基本安装</p></li><li><p>webpack-demo-2  如何创建一个 bundle 文件</p></li><li><p>webpack-demo-3  如何使用配置文件 （webpack.config.js）</p></li><li><p>webpack-demo-4-assets </p><ul><li>css 的加载  css-loader style-loader</li><li>图片css 用 file-loader，（压缩图片 image-webpack-loader 和 url-loader）</li><li>字体的加载 file-loader</li><li>数据文件的加载 csv-loader xml-loader</li></ul></li><li><p>webpack-demo-5-output-manahement</p><ul><li>输出多个 bundle.js 文件 </li><li>html-webapck-plugin 的使用</li><li>clean-webpack-plugin 清理文件</li><li>延伸 知识： 代码分离</li></ul></li><li><p>webpack-demo-6-devServer 主要就是 介绍了 自动编译</p><ul><li>inlie-source-map : 这个不是 插件，是webpack 自带的，只需要配置一下即可，作用：开发环境 生成 代码的 souce-map, 出错找到对应的 文件，而不是编译之后的 bundle.js 文件</li><li><code>watch</code> <code>webpack-dev-server</code> <code>webpack-dev-minddleware</code> 三选一即可，都有 自动检测代码跟新 再次编译的 功能</li><li><code>watch</code> 最简单，只需要 <code>webpack watch</code> 即可</li><li><code>webpack-dev-server</code> 是个插件，需要配置一下，高度集成在 webpack 中 （底层就是基于 webpack-dev-middleware 实现的 包含了 HRM 的功能）</li><li><code>webpack-dev-middleware</code> 也可以单独使用，结合 express 等web 框架，（是一个容器，与HRM不一样，其实 可以理解为 自己 实现一个 webpack-dev-server的功能）</li></ul></li><li><p>webpack-demo-7-devServer 主要介绍了 热跟新 的内容</p><ul><li>devServer 中启用 hot：true</li><li>webpack dev server 与 node 一起使用的时候 ，建议 单独一个文件启用，不要把 webpack-dev-server 与 webpack.config.js , 耦合在一起</li><li><strong>热跟新 会遇到很多问题，跟新之后，很多事件需要重新绑定，样式等等需要重新渲染，借助 各自提供的loader 会在内部直接解决，(vue react css等loader 内部已经帮我们实现了，所以用的时候很省心，但是我们需要有这样的情况)</strong> </li></ul></li><li><p>webpack-demo-8-treeSharking 主要介绍 tree sharking 移除没有引入的代码 （慎用）</p><ul><li><p>当impot {abc} from module ，打包时 去除 moudle 除了 abc 的方法</p></li><li><p>如何配置 找出 那些无用代码</p><ul><li>“sideEffects”: false，代表所有的都 执行 treeSharking ，或则 [‘./abc.js’] 单独排除 abc.js 文件</li></ul></li><li><p>压缩代码 ，使用wwebpack 自带的 uglifyJSplugin 代码压缩插件 <strong>插件必须支持去除无用代码才行</strong></p><ul><li>mode: “production”</li><li>webpack –optimize-minimize   </li></ul></li><li><p>本案列中 实际 展示效果并不完全一致<br> 唯一展示验证的一点是：当sideEffects：[],不包含 *.css ，那么css 样式被当做无用代码 移除了</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;useage&quot;&gt;&lt;a href=&quot;#useage&quot; class=&quot;headerlink&quot; title=&quot;useage&quot;&gt;&lt;/a&gt;useage&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;这篇文档是 按照webpack官网 步骤 学习webpack 知识，有代码，有相应的说明，有总结 也有对官网代码实现过程不一致的地方的记录，欢迎一起交流学习&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://fangtang0101.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>makedowm常用指令</title>
    <link href="https://fangtang0101.github.io/2019/07/23/makedowm%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>https://fangtang0101.github.io/2019/07/23/makedowm常用指令/</id>
    <published>2019-07-23T05:41:35.000Z</published>
    <updated>2019-07-23T05:55:37.352Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>常用makedowm 指令的记录</p></blockquote><a id="more"></a><h2 id="标题-http-support-typora-io-Markdown-Reference"><a href="#标题-http-support-typora-io-Markdown-Reference" class="headerlink" title="// 标题  http://support.typora.io/Markdown-Reference/"></a>// 标题  <a href="http://support.typora.io/Markdown-Reference/" target="_blank" rel="noopener">http://support.typora.io/Markdown-Reference/</a></h2><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h6 id="This-is-an-H6"><a href="#This-is-an-H6" class="headerlink" title="This is an H6"></a>This is an H6</h6><h2 id="引用块"><a href="#引用块" class="headerlink" title="// 引用块"></a>// 引用块</h2><blockquote><p>This is a blockquote with two paragraphs. This is first paragraph.</p></blockquote><p>// 列表</p><ul><li>Red        无序列表</li><li>Green</li><li>Blue</li></ul><ol><li>Red 有序列表 </li><li>Green</li><li>Blue</li></ol><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="// 任务列表"></a>// 任务列表</h2><ul><li><input disabled type="checkbox"> a task list item</li><li><input disabled type="checkbox"> list syntax required</li><li><input disabled type="checkbox"> normal <strong>formatting</strong>, @mentions, #1234 refs</li><li><input disabled type="checkbox"> incomplete</li><li><input checked disabled type="checkbox"> completed</li></ul><h2 id="代码块"><a href="#代码块" class="headerlink" title="// 代码块"></a>// 代码块</h2><p>​​<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'redcarpet'</span></span><br><span class="line">markdown = Redcarpet.new(<span class="string">"Hello World!"</span>)</span><br><span class="line">puts markdown.to_html</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><h2 id="公式"><a href="#公式" class="headerlink" title="// 公式"></a>// 公式</h2><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>$$</p><h2 id="表格"><a href="#表格" class="headerlink" title="// 表格"></a>// 表格</h2><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>//</td><td></td></tr><tr><td>—</td><td></td></tr><tr><td>Left-Aligned</td><td>Center Aligned</td></tr><tr><td>:————</td><td>:—————:</td></tr><tr><td>col 3 is</td><td>some wordy text</td></tr><tr><td>col 2 is</td><td>centered</td></tr><tr><td>zebra stripes</td><td>are neat</td></tr><tr><td>//助脚的使用</td><td></td></tr><tr><td>—</td><td></td></tr><tr><td>You can create footnotes like this[^footnote].</td><td></td></tr><tr><td>[^footnote]: Here is the <em>text</em> of the <strong>footnote</strong>.</td><td></td></tr><tr><td>// 水平线</td><td></td></tr><tr><td>—</td><td></td></tr><tr><td>***</td><td></td></tr><tr><td>// 链接</td><td></td></tr><tr><td>—</td><td></td></tr><tr><td>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</td><td></td></tr><tr><td><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.</td><td></td></tr><tr><td>// 图片</td><td></td></tr><tr><td>—</td><td></td></tr><tr><td><img src="/path/to/img.jpg" alt="Alt text"></td><td></td></tr><tr><td><img src="/path/to/img.jpg" alt="Alt text" title="Optional title"></td><td></td></tr><tr><td>//     强调 斜体 == <em></em></td><td></td></tr><tr><td>—</td><td></td></tr><tr><td><em>single asterisks</em></td><td></td></tr><tr><td><em>single underscores</em></td><td></td></tr></tbody></table><h2 id="强调-加粗"><a href="#强调-加粗" class="headerlink" title="//     强调 加粗 == "></a>//     强调 加粗 == <strong></strong></h2><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="//     代码"></a>//     代码</h2><p>Use the <code>printf()</code> function.</p><h2 id="删除线"><a href="#删除线" class="headerlink" title="//     删除线"></a>//     删除线</h2><p><del>Mistaken text.</del> becomes Mistaken text.</p><h2 id="下划线"><a href="#下划线" class="headerlink" title="//     下划线"></a>//     下划线</h2><p><u>Underline</u> becomes Underline.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;常用makedowm 指令的记录&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://fangtang0101.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>文章规划</title>
    <link href="https://fangtang0101.github.io/2019/07/23/%E6%96%87%E7%AB%A0%E8%A7%84%E5%88%92/"/>
    <id>https://fangtang0101.github.io/2019/07/23/文章规划/</id>
    <published>2019-07-23T05:40:36.000Z</published>
    <updated>2019-08-14T02:19:59.250Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>下面是要写的 <strong>文章规划 以及 文章的目录</strong></p></blockquote><a id="more"></a><h2 id="文章规划"><a href="#文章规划" class="headerlink" title="文章规划"></a>文章规划</h2><h3 id="环境-amp-amp-工具"><a href="#环境-amp-amp-工具" class="headerlink" title="环境&amp;&amp;工具"></a>环境&amp;&amp;工具</h3><ol><li>教程：如何通过<code>webpack</code>搭建<code>vue</code>多页面框架</li></ol><ul><li><input disabled type="checkbox"> 纯手写一个 vue 的 webpack</li><li><input disabled type="checkbox"> 纯手写一个 多页面 vue 的webpack 框架</li><li><input disabled type="checkbox"> 纯手写一个 Reat 的webpack</li></ul><ol start="2"><li>git 教程系列</li></ol><h3 id="编程语言-基础知识"><a href="#编程语言-基础知识" class="headerlink" title="编程语言 基础知识"></a>编程语言 基础知识</h3><ol><li><code>javastript</code> 基础知识</li><li><code>python</code>    基础知识</li></ol><h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><h3 id="前端相关"><a href="#前端相关" class="headerlink" title="前端相关"></a>前端相关</h3><ul><li><a href="https://fangtang0101.github.io/2019/07/30/前端-html/">前端-html</a></li><li><a href="https://fangtang0101.github.io/2019/07/30/前端-css/">前端-css</a></li><li><a href="https://fangtang0101.github.io/%2F2019%2F07%2F31%2F前端-js基础%2F">前端-js</a></li><li><a href="https://fangtang0101.github.io/2019/08/01/前端BOM与DOM/">前端BOM与DOM</a></li><li><a href="https://fangtang0101.github.io/2019/08/02/前端基础-框架-jquery/">前端基础-框架-jquery</a></li><li><a href="https://fangtang0101.github.io/2019/07/25/webpack-basics/">webpack-basics</a></li><li><a href="https://fangtang0101.github.io/2019/08/05/js环境之node/">js环境之node</a></li></ul><h3 id="后端相关（python）"><a href="#后端相关（python）" class="headerlink" title="后端相关（python）"></a>后端相关（python）</h3><ul><li><a href="https://fangtang0101.github.io/2019/08/05/python之Pycharm配置与安装/">python之Pycharm配置与安装</a></li><li><a href="https://fangtang0101.github.io/2019/08/05/python之python环境配置安装/">python之python环境配置安装</a></li><li><a href="https://fangtang0101.github.io/2019/08/05/django快速体验/">django快速体验</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;下面是要写的 &lt;strong&gt;文章规划 以及 文章的目录&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>test3</title>
    <link href="https://fangtang0101.github.io/2019/07/22/test3/"/>
    <id>https://fangtang0101.github.io/2019/07/22/test3/</id>
    <published>2019-07-22T09:51:42.000Z</published>
    <updated>2019-07-22T09:51:42.117Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>功能 图片 查看更过 作者 置顶 标签</title>
    <link href="https://fangtang0101.github.io/2019/07/22/test/"/>
    <id>https://fangtang0101.github.io/2019/07/22/test/</id>
    <published>2019-07-22T06:55:58.000Z</published>
    <updated>2019-07-23T03:02:15.616Z</updated>
    
    <content type="html"><![CDATA[<p>起水后的孙杨一如既往地向观众致意，随后他振臂高呼了两次，庆贺自己的四连冠和第十金。7月21日，韩国光州游泳世锦赛展开游泳项目的争夺，中国选手孙杨以3分42秒44的成绩斩获男子400米自由泳金牌，不仅实现了该项目的个人世锦赛四连冠，同时也斩获了个人的世锦赛第十金。</p><p>“能够实现四连冠，成为自由泳历史上第一人，是对我之前训练的肯定。第一项决赛不好比，但是每个人都一样，到最后我就是咬牙，训练练到了，我就能坚持到底。”27岁的孙杨一直在挑战自我。赛前外教丹尼斯没有给孙杨太多要求，而是告诉他，你现在能力很强，要把之前的训练成果展示给大家看。孙杨说：“之前训练练得非常好，但确实太累了。在这样的年纪达到这个水平非常不容易，很少有人能长时间保持在高水平上，这对我来说是至高无上的荣誉。”孙杨坦言在收获了诸多荣誉之后，依旧勇往直前就是要为荣誉而战，而这背后的艰辛与付出只有他自己知道。</p><a id="more"></a><p>从2012年开始到现在，孙杨在国际赛场400米自由泳项目上的表现可谓是统治级的，他仅在2016年里约奥运会上让金牌旁落，遗憾以0.13秒之差输给了澳大利亚选手霍顿。而在21日的决赛中，霍顿则再次败给了孙杨，他以0.73秒之差斩获一枚银牌。在赛后的颁奖仪式上，霍顿全程未登上领奖台，领奖后拒绝与孙杨和季军意大利选手德蒂合影。对此，孙杨在赛后发布会上进行了正面回应：“他想通过这样的举动影响我在赛道上的发挥，但我就做好自己该做的。你可以对我有意见，但颁奖是非常神圣的，每个人都代表自己的国家。”</p><p>本次世锦赛孙杨还将参加200米、800米自由泳以及接力比赛，其中200米自由泳项目是他另一个力保的项目。对于明年东京奥运会新增项目800米自由泳，孙杨同样要全力去拼，一方面检验训练成果，同时也参考各国选手的表现来更加科学地制定下一步的训练规划。（李雪颖/文 安灵均/图）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;起水后的孙杨一如既往地向观众致意，随后他振臂高呼了两次，庆贺自己的四连冠和第十金。7月21日，韩国光州游泳世锦赛展开游泳项目的争夺，中国选手孙杨以3分42秒44的成绩斩获男子400米自由泳金牌，不仅实现了该项目的个人世锦赛四连冠，同时也斩获了个人的世锦赛第十金。&lt;/p&gt;
&lt;p&gt;“能够实现四连冠，成为自由泳历史上第一人，是对我之前训练的肯定。第一项决赛不好比，但是每个人都一样，到最后我就是咬牙，训练练到了，我就能坚持到底。”27岁的孙杨一直在挑战自我。赛前外教丹尼斯没有给孙杨太多要求，而是告诉他，你现在能力很强，要把之前的训练成果展示给大家看。孙杨说：“之前训练练得非常好，但确实太累了。在这样的年纪达到这个水平非常不容易，很少有人能长时间保持在高水平上，这对我来说是至高无上的荣誉。”孙杨坦言在收获了诸多荣誉之后，依旧勇往直前就是要为荣誉而战，而这背后的艰辛与付出只有他自己知道。&lt;/p&gt;
    
    </summary>
    
      <category term="日记" scheme="https://fangtang0101.github.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="生活" scheme="https://fangtang0101.github.io/categories/%E6%97%A5%E8%AE%B0/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="数学" scheme="https://fangtang0101.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="文学" scheme="https://fangtang0101.github.io/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://fangtang0101.github.io/2019/07/22/hello-world/"/>
    <id>https://fangtang0101.github.io/2019/07/22/hello-world/</id>
    <published>2019-07-22T02:29:15.785Z</published>
    <updated>2019-07-29T06:01:24.979Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
